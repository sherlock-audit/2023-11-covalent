{
    "language": "Solidity",
    "sources": {
        "./contracts/ProofChain.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IOperationalStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract ProofChain is OwnableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\n\n    IOperationalStaking _stakingInterface; // staking contract\n\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    bytes32 public constant BLOCK_SPECIMEN_PRODUCER_ROLE = keccak256(\"BLOCK_SPECIMEN_PRODUCER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    uint256 private constant _DIVIDER = 10**18; // 18 decimals used for scaling\n\n    uint256 private _blockSpecimenQuorum; // The value is represented as a uint <= 10**18. The threshold value will later be divided by 10**18 to represent it as a percentage.  e.g.) 10**18 == 100%; 5 * 10**17 == 50%;\n    uint256 private _secondsPerBlock; // average block time on the chain where the ProofChain is deployed\n    uint128 private _blockSpecimenRewardAllocation; // the reward allocated per block hash\n    uint128 private _bspRequiredStake; // how much a validator should have staked in order to run an operator\n    uint64 private _blockSpecimenSessionDuration; // the length of a session in blocks\n    uint64 private _minSubmissionsRequired; // min number of participants who submitted the agreed specimen hash in order for the quorum to be achieved\n\n    EnumerableSetUpgradeable.Bytes32Set private _roleNames; // set of all role names\n\n    EnumerableSetUpgradeable.AddressSet private _blockSpecimenProducers; // currently enabled block specimen producer operators\n    EnumerableSetUpgradeable.AddressSet private _governors; // governor operators\n    EnumerableSetUpgradeable.AddressSet private _auditors; // auditor operators\n\n    mapping(address => uint128) public validatorIDs; // maps an operator address to validatorId\n    mapping(uint128 => EnumerableSetUpgradeable.AddressSet) private _validatorOperators; // operator addresses that validator owns\n    mapping(address => bytes32) public operatorRoles; // operator address => role\n    mapping(uint128 => uint128) private _validatorActiveOperatorsCounters; // how many operators are enabled per validator given validator id\n    mapping(uint64 => mapping(uint64 => BlockSpecimenSession)) private _sessions; // chainId => blockHeight\n    mapping(uint64 => ChainData) private _chainData; // by chain id\n\n    mapping(bytes32 => string[]) private _urls; // hash => urls\n\n    struct ChainData {\n        uint256 blockOnTargetChain; // block number on the chain for which BSP are produced which is mapped to the current chain block\n        uint256 blockOnCurrentChain; // block number on the chain where the ProofChain is deployed. it is mapped to the target chain block\n        uint256 secondsPerBlock; // average block time on the chain for which BSP is generated\n        uint128 allowedThreshold; // block offsett threshold, used to handle minor de-synchronization over time\n        uint128 maxSubmissionsPerBlockHeight; // max number of block hashes allowed to submit per block height\n        uint64 nthBlock; // block divisor\n    }\n\n    struct BlockHash {\n        mapping(bytes32 => address[]) participants; // specimen hash => operators who submitted the specimen hash\n        bytes32[] specimenHashes; // raw specimen hashes\n    }\n\n    struct SessionParticipantData {\n        uint128 stake; // stake at the time when an operator submitted the first specimen hash\n        uint128 submissionCounter; // how many specimen hashes an operator has submitted\n    }\n\n    struct BlockSpecimenSession {\n        mapping(bytes32 => BlockHash) blockHashes;\n        bytes32[] blockHashesRaw;\n        mapping(address => SessionParticipantData) participantsData; // stake and submission counter, pack these together to save gas\n        uint64 sessionDeadline; // the last block when an operator can submit a specimen hash\n        bool requiresAudit; // auditor can arbitrate the session only if this is set to true\n    }\n\n    event OperatorAdded(address operator, uint128 validatorId, bytes32 role);\n\n    event OperatorRemoved(address operator);\n\n    event OperatorEnabled(address operator);\n\n    event OperatorDisabled(address operator);\n\n    event BlockSpecimenProductionProofSubmitted(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash, // SHA-256 content-hash of specimen object file;\n        string storageURL, // URL of specimen storage\n        uint128 submittedStake\n    );\n\n    event SessionStarted(uint64 indexed chainId, uint64 indexed blockHeight, uint64 deadline);\n\n    event BlockSpecimenRewardAwarded(uint64 indexed chainId, uint64 indexed blockHeight, bytes32 indexed blockhash, bytes32 specimenhash);\n\n    event QuorumNotReached(uint64 indexed chainId, uint64 blockHeight);\n\n    event BlockSpecimenRewardChanged(uint128 newBlockSpecimenRewardAllocation);\n\n    event MinimumRequiredStakeChanged(uint128 newStakeRequirement);\n\n    event StakingInterfaceChanged(address newInterfaceAddress);\n\n    event SpecimenSessionQuorumChanged(uint256 newQuorumThreshold);\n\n    event SpecimenSessionDurationChanged(uint64 newSessionDuration);\n\n    event SpecimenSessionMinSubmissionChanged(uint64 minSubmissions);\n\n    event NthBlockChanged(uint64 indexed chainId, uint64 indexed nthBlock);\n\n    event MaxSubmissionsPerBlockHeightChanged(uint256 maxSubmissions);\n\n    event ChainSyncDataChanged(uint64 indexed chainId, uint256 blockOnTargetChain, uint256 blockOnCurrentChain, uint256 secondsPerBlock);\n\n    event SecondsPerBlockChanged(uint64 indexed secondsPerBlock);\n\n    event BlockHeightSubmissionThresholdChanged(uint64 indexed chainId, uint64 threshold);\n\n    modifier onlyGovernor() {\n        require(_governors.contains(msg.sender), \"Sender is not GOVERNANCE_ROLE\");\n        _;\n    }\n\n    /**\n     * Operators will have multiple addresses: the address they submit the proofs from and the address that manages staking and operator instances\n     */\n    modifier onlyOperatorManager(address operator) {\n        (address validatorAddress, , , ) = _stakingInterface.getValidatorMetadata(validatorIDs[operator]);\n        require(validatorAddress == msg.sender, \"Sender is not operator manager\");\n        _;\n    }\n\n    function initialize(address initialOwner, address stakingContract) public initializer {\n        __Ownable_init();\n\n        _governors.add(msg.sender);\n\n        _roleNames.add(GOVERNANCE_ROLE);\n        _roleNames.add(BLOCK_SPECIMEN_PRODUCER_ROLE);\n        _roleNames.add(AUDITOR_ROLE);\n\n        setQuorumThreshold(_DIVIDER / 2); // 50%\n        setBlockSpecimenReward(10**14); // 0.0001\n        setBlockSpecimenSessionDuration(240); // blocks\n        setMinSubmissionsRequired(2);\n        setStakingInterface(stakingContract);\n        _governors.remove(msg.sender);\n\n        operatorRoles[initialOwner] = GOVERNANCE_ROLE;\n        _governors.add(initialOwner);\n        emit OperatorAdded(initialOwner, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Adds operator on the staking contract\n     */\n    function addValidator(address validator, uint128 commissionRate) external onlyGovernor {\n        _stakingInterface.addValidator(validator, commissionRate);\n    }\n\n    /**\n     * Disables the given operator on the staking contract\n     */\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external onlyGovernor {\n        _stakingInterface.disableValidator(validatorId, blockNumber);\n    }\n\n    /**\n     * Disables the operator instance.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function _removeBSPOperatorFromActiveInstances(address operator) internal {\n        _blockSpecimenProducers.remove(operator);\n        uint128 validatorId = validatorIDs[operator];\n        _validatorActiveOperatorsCounters[validatorId]--;\n        // if there are not more enabled operators left we need to disable the validator instance too\n        if (_validatorActiveOperatorsCounters[validatorId] == 0) _stakingInterface.disableValidator(validatorId, block.number);\n    }\n\n    /**\n     * Enables the operator instance. The operators need to call that function before they can start submitting proofs\n     */\n    function enableBSPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        require(!_blockSpecimenProducers.contains(operator), \"Operator is already enabled\");\n        uint128 validatorId = validatorIDs[operator];\n        _blockSpecimenProducers.add(operator);\n        _validatorActiveOperatorsCounters[validatorId]++;\n        // if no operator was enabled we need to enable the validator instance\n        if (_validatorActiveOperatorsCounters[validatorId] == 1) _stakingInterface.enableValidator(validatorId);\n        emit OperatorEnabled(operator);\n    }\n\n    /**\n     * Disables the operator instance. The operator cannot submit proofs its instance got disabled.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function disableBSPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        require(_blockSpecimenProducers.contains(operator), \"Operator is already disabled\");\n        _removeBSPOperatorFromActiveInstances(operator);\n        emit OperatorDisabled(operator);\n    }\n\n    /**\n     * Adds the given address to the block specimen producers set\n     */\n    function addBSPOperator(address operator, uint128 validatorId) external onlyGovernor {\n        require(operatorRoles[operator] == 0, \"Operator already exists\");\n        operatorRoles[operator] = BLOCK_SPECIMEN_PRODUCER_ROLE;\n        validatorIDs[operator] = validatorId;\n        _validatorOperators[validatorId].add(operator);\n        emit OperatorAdded(operator, validatorId, BLOCK_SPECIMEN_PRODUCER_ROLE);\n    }\n\n    /**\n     * Removes the given address from the block specimen producers set\n     */\n    function removeBSPOperator(address operator) external onlyGovernor {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        if (_blockSpecimenProducers.contains(operator)) _removeBSPOperatorFromActiveInstances(operator);\n        _validatorOperators[validatorIDs[operator]].remove(operator);\n        validatorIDs[operator] = 0;\n        operatorRoles[operator] = 0;\n        emit OperatorRemoved(operator);\n    }\n\n    /**\n     * Adds the given address to the auditors set\n     */\n    function addAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == 0, \"Operator already exists\");\n        operatorRoles[auditor] = AUDITOR_ROLE;\n        _auditors.add(auditor);\n        emit OperatorAdded(auditor, 0, AUDITOR_ROLE);\n    }\n\n    /**\n     * Removes the given address from the auditors set\n     */\n    function removeAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == AUDITOR_ROLE, \"Operator is not auditor\");\n        operatorRoles[auditor] = 0;\n        _auditors.remove(auditor);\n        emit OperatorRemoved(auditor);\n    }\n\n    /**\n     * Adds the given address to the governors set\n     */\n    function addGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == 0, \"Operator already exists\");\n        operatorRoles[governor] = GOVERNANCE_ROLE;\n        _governors.add(governor);\n        emit OperatorAdded(governor, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Removes the given address from the governors set\n     */\n    function removeGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == GOVERNANCE_ROLE, \"Operator is not governor\");\n        operatorRoles[governor] = 0;\n        _governors.remove(governor);\n        emit OperatorRemoved(governor);\n    }\n\n    /**\n     * Updates the amount of tokens required to stake in order to be able to submit the proofs\n     */\n    function setBSPRequiredStake(uint128 newStakeAmount) public onlyGovernor {\n        _bspRequiredStake = newStakeAmount;\n        emit MinimumRequiredStakeChanged(newStakeAmount);\n    }\n\n    /**\n     * Updates the address of the staking contract\n     */\n    function setStakingInterface(address stakingContractAddress) public onlyGovernor {\n        _stakingInterface = IOperationalStaking(stakingContractAddress);\n        emit StakingInterfaceChanged(stakingContractAddress);\n    }\n\n    /**\n     * Update the Block Specimen Quorum Threshold.\n     */\n    function setQuorumThreshold(uint256 quorum) public onlyGovernor {\n        _blockSpecimenQuorum = quorum;\n        emit SpecimenSessionQuorumChanged(quorum);\n    }\n\n    /**\n     * Update block divisor\n     */\n    function setNthBlock(uint64 chainId, uint64 n) public onlyGovernor {\n        _chainData[chainId].nthBlock = n;\n        emit NthBlockChanged(chainId, n);\n    }\n\n    /**\n     * Update the reward allocation per block specimen.\n     */\n    function setBlockSpecimenReward(uint128 newBlockSpecimenReward) public onlyGovernor {\n        _blockSpecimenRewardAllocation = newBlockSpecimenReward;\n        emit BlockSpecimenRewardChanged(newBlockSpecimenReward);\n    }\n\n    /**\n     * Update the duration of a specimen session in blocks\n     */\n    function setBlockSpecimenSessionDuration(uint64 newSessionDuration) public onlyGovernor {\n        _blockSpecimenSessionDuration = newSessionDuration;\n        emit SpecimenSessionDurationChanged(newSessionDuration);\n    }\n\n    /**\n     * Update the minimum # of submissions required in order to reach quorum\n     */\n    function setMinSubmissionsRequired(uint64 minSubmissions) public onlyGovernor {\n        _minSubmissionsRequired = minSubmissions;\n        emit SpecimenSessionMinSubmissionChanged(minSubmissions);\n    }\n\n    /**\n     * Update the max # of submissions per operator per block height\n     */\n    function setMaxSubmissionsPerBlockHeight(uint64 chainId, uint64 maxSubmissions) public onlyGovernor {\n        _chainData[chainId].maxSubmissionsPerBlockHeight = maxSubmissions;\n        emit MaxSubmissionsPerBlockHeightChanged(maxSubmissions);\n    }\n\n    /**\n     * Update chain sync data\n     */\n    function setChainSyncData(\n        uint64 chainId,\n        uint256 blockOnTargetChain,\n        uint256 blockOnCurrentChain,\n        uint256 secondsPerBlock\n    ) external onlyGovernor {\n        ChainData storage cd = _chainData[chainId];\n        require(secondsPerBlock > 0, \"Seconds per block cannot be 0\");\n        cd.blockOnTargetChain = blockOnTargetChain;\n        cd.blockOnCurrentChain = blockOnCurrentChain;\n        cd.secondsPerBlock = secondsPerBlock;\n        emit ChainSyncDataChanged(chainId, blockOnTargetChain, blockOnCurrentChain, secondsPerBlock);\n    }\n\n    /**\n     * Update block height submission threshold for live sync\n     */\n    function setBlockHeightSubmissionsThreshold(uint64 chainId, uint64 threshold) external onlyGovernor {\n        _chainData[chainId].allowedThreshold = threshold;\n        emit BlockHeightSubmissionThresholdChanged(chainId, threshold);\n    }\n\n    /**\n     * Update seconds per block on the chain where the ProofChain is deployed\n     */\n    function setSecondsPerBlock(uint64 secondsPerBlock) external onlyGovernor {\n        _secondsPerBlock = secondsPerBlock;\n        emit SecondsPerBlockChanged(secondsPerBlock);\n    }\n\n    /**\n     * Block Specimen Producers submit their block specimen proofs using this function.\n     */\n    function submitBlockSpecimenProof(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash,\n        string calldata storageURL\n    ) external {\n        require(_blockSpecimenProducers.contains(msg.sender), \"Sender is not BLOCK_SPECIMEN_PRODUCER_ROLE\");\n        ChainData storage cd = _chainData[chainId];\n        require(cd.nthBlock != 0, \"Invalid chain ID\");\n        require(blockHeight % cd.nthBlock == 0, \"Invalid block height\");\n\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[msg.sender];\n\n        // if this is the first specimen to be submitted for a block, initialize a new session\n        if (sessionDeadline == 0) {\n            require(!session.requiresAudit, \"Session submissions have closed\");\n\n            uint256 currentBlockOnTargetChain = cd.blockOnTargetChain + (((block.number - cd.blockOnCurrentChain) * _secondsPerBlock) / cd.secondsPerBlock);\n            uint256 lowerBound = currentBlockOnTargetChain >= cd.allowedThreshold ? currentBlockOnTargetChain - cd.allowedThreshold : 0;\n            require(lowerBound <= blockHeight && blockHeight <= currentBlockOnTargetChain + cd.allowedThreshold, \"Block height is out of bounds for live sync\");\n\n            session.sessionDeadline = uint64(block.number + _blockSpecimenSessionDuration);\n            (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n            require(baseStake >= _bspRequiredStake, \"Insufficiently staked to submit\");\n            participantsData.stake = baseStake + delegateStakes;\n\n            session.blockHashesRaw.push(blockHash);\n            BlockHash storage bh = session.blockHashes[blockHash];\n            bh.specimenHashes.push(specimenHash);\n\n            bh.participants[specimenHash].push(msg.sender);\n            participantsData.submissionCounter++;\n            emit SessionStarted(chainId, blockHeight, session.sessionDeadline);\n        } else {\n            require(block.number <= sessionDeadline, \"Session submissions have closed\");\n            require(participantsData.submissionCounter < cd.maxSubmissionsPerBlockHeight, \"Max submissions limit exceeded\");\n\n            BlockHash storage bh = session.blockHashes[blockHash];\n            bytes32[] storage specimenHashes = bh.specimenHashes;\n            if (participantsData.stake != 0) {\n                // check if it was submitted for the same block hash\n                // this should be at most 10 iterations\n                for (uint256 j = 0; j < specimenHashes.length; j++) {\n                    address[] storage specimenHashParticipants = bh.participants[specimenHashes[j]];\n                    for (uint256 k = 0; k < specimenHashParticipants.length; k++)\n                        require(specimenHashParticipants[k] != msg.sender, \"Operator already submitted for the provided block hash\");\n                }\n            } else {\n                (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n                require(baseStake >= _bspRequiredStake, \"Insufficiently staked to submit\");\n                participantsData.stake = baseStake + delegateStakes;\n            }\n\n            address[] storage participants = bh.participants[specimenHash];\n            if (specimenHashes.length != 0) {\n                if (participants.length == 0) specimenHashes.push(specimenHash);\n            } else {\n                session.blockHashesRaw.push(blockHash);\n                specimenHashes.push(specimenHash);\n            }\n\n            participants.push(msg.sender);\n            participantsData.submissionCounter++;\n        }\n        _urls[specimenHash].push(storageURL);\n\n        emit BlockSpecimenProductionProofSubmitted(chainId, blockHeight, blockHash, specimenHash, storageURL, participantsData.stake);\n    }\n\n    /**\n     * This function is called when a quorum of equivalent hashes have been submitted for a Block Specimen Session.\n     */\n    function finalizeAndRewardSpecimenSession(uint64 chainId, uint64 blockHeight) public {\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        require(block.number > sessionDeadline, \"Session not past deadline\");\n        require(!session.requiresAudit, \"Session cannot be finalized\");\n        require(sessionDeadline != 0, \"Session not started\");\n\n        uint256 contributorsN;\n        bytes32 specimenHash;\n\n        uint256 max;\n        bytes32 agreedBlockHash;\n        bytes32 agreedSpecimenHash;\n\n        bytes32[] storage blockHashesRaw = session.blockHashesRaw;\n        bytes32 rawBlockHash;\n\n        // find the block hash and specimen hashes that the quorum agrees on by finding the specimen hash with the highest number of participants\n        for (uint256 i = 0; i < blockHashesRaw.length; i++) {\n            rawBlockHash = blockHashesRaw[i];\n            BlockHash storage bh = session.blockHashes[rawBlockHash];\n            for (uint256 j = 0; j < bh.specimenHashes.length; j++) {\n                specimenHash = bh.specimenHashes[j];\n                uint256 len = bh.participants[specimenHash].length;\n                contributorsN += len;\n                if (len > max) {\n                    max = len;\n                    agreedBlockHash = rawBlockHash;\n                    agreedSpecimenHash = specimenHash;\n                }\n            }\n        }\n        // check if the number of submissions is sufficient and if the quorum is achieved\n        if (_minSubmissionsRequired <= max && (max * _DIVIDER) / contributorsN > _blockSpecimenQuorum)\n            _rewardParticipants(session, chainId, blockHeight, agreedBlockHash, agreedSpecimenHash);\n        else emit QuorumNotReached(chainId, blockHeight);\n\n        session.requiresAudit = true;\n        // set session deadline to 0 to release gas\n        session.sessionDeadline = 0;\n    }\n\n    /**\n     * Called by Auditor role when a quorum is not reached. The auditor's submitted hash is\n     * the definitive truth.\n     */\n    function arbitrateBlockSpecimenSession(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 definitiveSpecimenHash\n    ) public {\n        require(_auditors.contains(msg.sender), \"Sender is not AUDITOR_ROLE\");\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        require(session.requiresAudit, \"Session must be finalized before audit\");\n        _rewardParticipants(session, chainId, blockHeight, blockHash, definitiveSpecimenHash);\n    }\n\n    function _rewardParticipants(\n        BlockSpecimenSession storage session,\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash\n    ) internal {\n        address participant;\n        address[] storage participants = session.blockHashes[blockHash].participants[specimenHash];\n        uint256 len = participants.length;\n        uint128[] memory ids = new uint128[](len);\n        uint128[] memory rewards = new uint128[](len);\n        uint128 totalStake;\n        mapping(address => SessionParticipantData) storage participantsData = session.participantsData;\n        for (uint256 i = 0; i < len; i++) {\n            totalStake += participantsData[participants[i]].stake;\n        }\n        for (uint256 i = 0; i < len; i++) {\n            participant = participants[i];\n            SessionParticipantData storage pd = participantsData[participant];\n            ids[i] = validatorIDs[participant];\n            rewards[i] = uint128((uint256(pd.stake) * uint256(_blockSpecimenRewardAllocation)) / totalStake);\n            // release gas if possible\n            if (pd.submissionCounter == 1) {\n                pd.submissionCounter = 0;\n                pd.stake = 0;\n            }\n        }\n        _stakingInterface.rewardValidators(ids, rewards);\n        emit BlockSpecimenRewardAwarded(chainId, blockHeight, blockHash, specimenHash);\n\n        delete session.blockHashes[blockHash]; // release gas\n    }\n\n    /**\n     * Returns contract meta data\n     */\n    function getMetadata()\n        public\n        view\n        returns (\n            address stakingInterface,\n            uint128 blockSpecimenRewardAllocation,\n            uint64 blockSpecimenSessionDuration,\n            uint64 minSubmissionsRequired,\n            uint256 blockSpecimenQuorum,\n            uint256 secondsPerBlock\n        )\n    {\n        return (address(_stakingInterface), _blockSpecimenRewardAllocation, _blockSpecimenSessionDuration, _minSubmissionsRequired, _blockSpecimenQuorum, _secondsPerBlock);\n    }\n\n    /**\n     * Returns data used for chain sync\n     */\n    function getChainData(uint64 chainId)\n        external\n        view\n        returns (\n            uint256 blockOnTargetChain,\n            uint256 blockOnCurrentChain,\n            uint256 secondsPerBlock,\n            uint128 allowedThreshold,\n            uint128 maxSubmissionsPerBlockHeight,\n            uint64 nthBlock\n        )\n    {\n        ChainData memory cd = _chainData[chainId];\n        return (cd.blockOnTargetChain, cd.blockOnCurrentChain, cd.secondsPerBlock, cd.allowedThreshold, cd.maxSubmissionsPerBlockHeight, cd.nthBlock);\n    }\n\n    /**\n     * Returns all bsp operator addresses (disabled and enabled) of a given validator\n     */\n    function getOperators(uint128 validatorId) external view returns (address[] memory) {\n        return _validatorOperators[validatorId].values();\n    }\n\n    /**\n     * Returns all enabled operators by role type\n     */\n    function getAllOperators()\n        external\n        view\n        returns (\n            address[] memory _bsps,\n            address[] memory __governors,\n            address[] memory __auditors\n        )\n    {\n        return (_blockSpecimenProducers.values(), _governors.values(), _auditors.values());\n    }\n\n    /**\n     * Returns required stake and enabled block specimen producer operators\n     */\n    function getBSPRoleData() external view returns (uint128 requiredStake, address[] memory activeMembers) {\n        return (_bspRequiredStake, _blockSpecimenProducers.values());\n    }\n\n    /**\n     * Returns true if the given operator is enabled.\n     * Returns false if the operator is disabled or does not exist\n     */\n    function isEnabled(address operator) external view returns (bool) {\n        return _blockSpecimenProducers.contains(operator);\n    }\n\n    /**\n     * Returns IPFS urls where specimens reside\n     */\n    function getURLS(bytes32 specimenhash) external view returns (string[] memory) {\n        return _urls[specimenhash];\n    }\n\n    /**\n     * This function is called to check whether the sesion is open for the given chain id and block height\n     */\n    function isSessionOpen(\n        uint64 chainId,\n        uint64 blockHeight,\n        address operator\n    ) public view returns (bool) {\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[operator];\n        bool submissionLimitExceeded = participantsData.submissionCounter == _chainData[chainId].maxSubmissionsPerBlockHeight;\n        return (!submissionLimitExceeded && block.number <= sessionDeadline) || (sessionDeadline == 0 && !session.requiresAudit);\n    }\n}\n"
        },
        "./contracts/IOperationalStaking.sol": {
            "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.13;\n\ninterface IOperationalStaking {\n    function getValidatorMetadata(uint128 validatorId)\n        external\n        view\n        returns (\n            address _address,\n            uint128 staked,\n            uint128 delegated,\n            uint128 commissionRate\n        );\n\n    function getValidatorStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated);\n\n    function getValidatorCompoundedStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated);\n\n    function rewardValidators(uint128[] calldata validatorId, uint128[] calldata amount) external;\n\n    function addValidator(address validator, uint128 commissionRate) external returns (uint256 id);\n\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external;\n\n    function enableValidator(uint128 validatorId) external;\n}\n"
        },
        "./contracts/OperationalStaking.sol": {
            "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\ncontract OperationalStaking is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 public constant DIVIDER = 10**18; // 18 decimals used for scaling rates\n    uint128 public constant REWARD_REDEEM_THRESHOLD = 10**8; // minimum number of tokens that can be redeemed\n\n    IERC20Upgradeable public CQT;\n    uint128 public rewardPool; // how many tokens are allocated for rewards\n    uint128 public validatorCoolDown; // how many blocks until validator unstaking is unlocked\n    uint128 public delegatorCoolDown; // how many blocks until delegator unstaking is unlocked\n    uint128 public maxCapMultiplier; // *see readme\n    uint128 public validatorMaxStake; // how many tokens validators can stake at most\n    address public stakingManager;\n    uint128 public validatorsN; // number of validators, used to get validator ids\n    mapping(uint128 => Validator) internal _validators; // id -> validator instance\n\n    struct Staking {\n        uint128 shares; // # of validator shares that the delegator owns\n        uint128 staked; // # of CQT that a delegator delegated originally through stake() transaction\n    }\n\n    struct Unstaking {\n        uint128 coolDownEnd; // epoch when unstaking can be redeemed\n        uint128 amount; // # of unstaked CQT\n    }\n\n    struct Validator {\n        uint128 commissionAvailableToRedeem;\n        uint128 exchangeRate; // validator exchange rate\n        address _address; // wallet address of the operator which is mapped to the validator instance\n        uint128 delegated; // track amount of tokens delegated\n        uint128 totalShares; // total number of validator shares\n        uint128 commissionRate;\n        uint256 disabledAtBlock;\n        mapping(address => Staking) stakings;\n        mapping(address => Unstaking[]) unstakings;\n    }\n\n    event Initialized(address cqt, uint128 validatorCoolDown, uint128 delegatorCoolDown, uint128 maxCapMultiplier, uint128 validatorMaxStake);\n\n    event RewardTokensDeposited(uint128 amount);\n\n    event ValidatorAdded(uint128 indexed id, uint128 commissionRate, address indexed validator);\n\n    event Staked(uint128 indexed validatorId, address delegator, uint128 amount);\n\n    event Unstaked(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakeId);\n\n    event RecoveredUnstake(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakingId);\n\n    event UnstakeRedeemed(uint128 indexed validatorId, address indexed delegator, uint128 indexed unstakeId, uint128 amount);\n\n    event AllocatedTokensTaken(uint128 amount);\n\n    event RewardFailedDueLowPool(uint128 indexed validatorId, uint128 amount);\n\n    event RewardFailedDueZeroStake(uint128 indexed validatorId, uint128 amount);\n\n    event RewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);\n\n    event CommissionRewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);\n\n    event StakingManagerAddressChanged(address indexed operationalManager);\n\n    event ValidatorCommissionRateChanged(uint128 indexed validatorId, uint128 amount);\n\n    event ValidatorMaxCapChanged(uint128 amount);\n\n    event ValidatorDisabled(uint128 indexed validatorId, uint256 blockNumber);\n\n    event Redelegated(uint128 indexed oldValidatorId, uint128 indexed newValidatorId, address indexed delegator, uint128 amount, uint128 unstakingId);\n\n    event MaxCapMultiplierChanged(uint128 newMaxCapMultiplier);\n\n    event ValidatorEnabled(uint128 indexed validatorId);\n\n    event ValidatorAddressChanged(uint128 indexed validatorId, address indexed newAddress);\n\n    modifier onlyStakingManager() {\n        require(stakingManager == msg.sender, \"Caller is not stakingManager\");\n        _;\n    }\n\n    function initialize(\n        address cqt,\n        uint128 dCoolDown,\n        uint128 vCoolDown,\n        uint128 maxCapM,\n        uint128 vMaxStake\n    ) external initializer {\n        __Ownable_init();\n        validatorCoolDown = vCoolDown; // 180*6857 = ~ 6 months\n        delegatorCoolDown = dCoolDown; //  28*6857 = ~ 28 days\n        maxCapMultiplier = maxCapM;\n        validatorMaxStake = vMaxStake;\n        CQT = IERC20Upgradeable(cqt);\n        emit Initialized(cqt, vCoolDown, dCoolDown, maxCapM, vMaxStake);\n    }\n\n    function setStakingManagerAddress(address newAddress) external onlyOwner {\n        require(newAddress != address(0), \"Invalid address\");\n        stakingManager = newAddress;\n        emit StakingManagerAddressChanged(newAddress);\n    }\n\n    /*\n     * Transfer CQT from the owner to the contract for reward allocation\n     */\n    function depositRewardTokens(uint128 amount) external onlyOwner {\n        require(amount > 0, \"Amount is 0\");\n        unchecked {\n            rewardPool += amount;\n        }\n        _transferToContract(msg.sender, amount);\n        emit RewardTokensDeposited(amount);\n    }\n\n    /*\n     * Transfer reward CQT from the contract to the owner\n     */\n    function takeOutRewardTokens(uint128 amount) external onlyOwner {\n        require(amount > 0, \"Amount is 0\");\n        require(amount <= rewardPool, \"Reward pool is too small\");\n        unchecked {\n            rewardPool -= amount;\n        }\n        emit AllocatedTokensTaken(amount);\n        _transferFromContract(msg.sender, amount);\n    }\n\n    /*\n     * Updates validator max cap multiplier that determines how many tokens can be delegated\n     */\n    function setMaxCapMultiplier(uint128 newMaxCapMultiplier) external onlyOwner {\n        require(newMaxCapMultiplier > 0, \"Must be greater than 0\");\n        maxCapMultiplier = newMaxCapMultiplier;\n        emit MaxCapMultiplierChanged(newMaxCapMultiplier);\n    }\n\n    /*\n     * Updates maximum number of tokens that a validator can stake\n     */\n    function setValidatorMaxStake(uint128 maxStake) external onlyOwner {\n        require(maxStake > 0, \"Provided max stake is 0\");\n        validatorMaxStake = maxStake;\n        emit ValidatorMaxCapChanged(maxStake);\n    }\n\n    /*\n     * Adds new validator instance\n     */\n    function addValidator(address validator, uint128 commissionRate) external onlyStakingManager returns (uint256 id) {\n        require(commissionRate < DIVIDER, \"Rate must be less than 100%\");\n        require(validator != address(0), \"Validator address is 0\");\n        Validator storage v = _validators[validatorsN]; // use current number of validators for the id of a new validator instance\n        v._address = validator;\n        v.exchangeRate = uint128(DIVIDER); // make it 1:1 initially\n        v.commissionRate = commissionRate;\n        v.disabledAtBlock = 1; // set it to 1 to indicate that the validator is disabled\n\n        emit ValidatorAdded(validatorsN, commissionRate, validator);\n        unchecked {\n            validatorsN += 1;\n        }\n\n        return validatorsN - 1;\n    }\n\n    /*\n     * Reward emission\n     */\n    function rewardValidators(uint128[] calldata ids, uint128[] calldata amounts) external onlyStakingManager {\n        require(ids.length == amounts.length, \"Given ids and amounts arrays must be of the same length\");\n        uint128 newRewardPool = rewardPool;\n        uint128 amount;\n        uint128 validatorId;\n        uint128 commissionPaid;\n\n        for (uint256 j = 0; j < ids.length; j++) {\n            amount = amounts[j];\n            validatorId = ids[j];\n            // make sure there are enough tokens in the reward pool\n            if (newRewardPool < amount) {\n                emit RewardFailedDueLowPool(validatorId, amount);\n            } else {\n                Validator storage v = _validators[validatorId];\n                // make sure validator has tokens staked (nothing was unstaked right before the reward emission)\n                uint256 totalShares = uint256(v.totalShares);\n                if (totalShares == 0) {\n                    emit RewardFailedDueZeroStake(validatorId, amount);\n                } else {\n                    commissionPaid = uint128((uint256(amount) * uint256(v.commissionRate)) / DIVIDER);\n                    v.exchangeRate += uint128(((amount - commissionPaid) * DIVIDER) / totalShares); // distribute the tokens by increasing the exchange rate\n                    // commission is not compounded\n                    // commisison is distributed under the validator instance\n                    v.commissionAvailableToRedeem += commissionPaid;\n\n                    newRewardPool -= amount;\n                }\n            }\n        }\n        rewardPool = newRewardPool; // can never access these tokens anymore, reserved for validator rewards\n    }\n\n    /*\n     * Disables validator instance starting from the given block\n     */\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external onlyStakingManager {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(blockNumber > 0, \"Disable block cannot be 0\");\n        _validators[validatorId].disabledAtBlock = blockNumber;\n        emit ValidatorDisabled(validatorId, blockNumber);\n    }\n\n    /*\n     * Enables validator instance by setting the disabledAtBlock to 0\n     */\n    function enableValidator(uint128 validatorId) external onlyStakingManager {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        _validators[validatorId].disabledAtBlock = 0;\n        emit ValidatorEnabled(validatorId);\n    }\n\n    /*\n     * Updates validator comission rate\n     * Commission rate is a number between 0 and 10^18 (0%-100%)\n     */\n    function setValidatorCommissionRate(uint128 validatorId, uint128 amount) external onlyOwner {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(amount < DIVIDER, \"Rate must be less than 100%\");\n        _validators[validatorId].commissionRate = amount;\n        emit ValidatorCommissionRateChanged(validatorId, amount);\n    }\n\n    /*\n     * Used to transfer CQT from delegators, validators, and the owner to the contract\n     */\n    function _transferToContract(address from, uint128 amount) internal {\n        CQT.safeTransferFrom(from, address(this), amount);\n    }\n\n    /*\n     * Used to transfer CQT from contract, for reward redemption or transferring out unstaked tokens\n     */\n    function _transferFromContract(address to, uint128 amount) internal {\n        CQT.safeTransfer(to, amount);\n    }\n\n    /*\n     * Used to convert validator shares to CQT\n     */\n    function _sharesToTokens(uint128 sharesN, uint128 rate) internal pure returns (uint128) {\n        return uint128((uint256(sharesN) * uint256(rate)) / DIVIDER);\n    }\n\n    /*\n     * Used to convert CQT to validator shares\n     */\n    function _tokensToShares(uint128 amount, uint128 rate) internal pure returns (uint128) {\n        return uint128((uint256(amount) * DIVIDER) / uint256(rate));\n    }\n\n    /*\n     * Delegates tokens under the provided validator\n     */\n    function stake(uint128 validatorId, uint128 amount) external {\n        _stake(validatorId, amount, true);\n    }\n\n    /*\n     * withTransfer is set to false when delegators recover unstaked or redelegated tokens.\n     * These tokens are already in the contract.\n     */\n    function _stake(\n        uint128 validatorId,\n        uint128 amount,\n        bool withTransfer\n    ) internal {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(amount >= REWARD_REDEEM_THRESHOLD, \"Stake amount is too small\");\n        Validator storage v = _validators[validatorId];\n        bool isValidator = msg.sender == v._address;\n\n        // validators should be able to stake if they are disabled.\n        if (!isValidator) require(v.disabledAtBlock == 0, \"Validator is disabled\");\n\n        uint128 sharesAdd = _tokensToShares(amount, v.exchangeRate);\n        Staking storage s = v.stakings[msg.sender];\n\n        if (isValidator) {\n            // the compounded rewards are not included in max stake check\n            // hence we use s.staked instead of s.shares for valueStaked calculation\n            uint128 valueStaked = s.staked + amount;\n            require(valueStaked <= validatorMaxStake, \"Validator max stake exceeded\");\n        } else {\n            // cannot stake more than validator delegation max cap\n            uint128 delegationMaxCap = v.stakings[v._address].staked * maxCapMultiplier;\n            uint128 newDelegated = v.delegated + amount;\n            require(newDelegated <= delegationMaxCap, \"Validator max delegation exceeded\");\n            v.delegated = newDelegated;\n        }\n\n        // \"buy/mint\" shares\n        v.totalShares += sharesAdd;\n        s.shares += sharesAdd;\n\n        // keep track of staked tokens\n        s.staked += amount;\n        if (withTransfer) _transferToContract(msg.sender, amount);\n        emit Staked(validatorId, msg.sender, amount);\n    }\n\n    /*\n     * Undelegates tokens from the provided validator\n     */\n    function unstake(uint128 validatorId, uint128 amount) external {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(amount >= REWARD_REDEEM_THRESHOLD, \"Unstake amount is too small\");\n        Validator storage v = _validators[validatorId];\n        Staking storage s = v.stakings[msg.sender];\n        require(s.staked >= amount, \"Staked < amount provided\");\n\n        bool isValidator = msg.sender == v._address;\n        if (isValidator && v.disabledAtBlock == 0) {\n            // validators will have to disable themselves if they want to unstake tokens below delegation max cap\n            uint128 newValidatorMaxCap = (s.staked - amount) * maxCapMultiplier;\n            require(v.delegated <= newValidatorMaxCap, \"Cannot unstake beyond max cap\");\n        }\n        if (!isValidator) {\n            v.delegated -= amount;\n        }\n\n        uint128 sharesRemove = _tokensToShares(amount, v.exchangeRate);\n        // \"sell/burn\" shares\n        // sometimes due to conversion inconsistencies shares to remove might end up being bigger than shares stored\n        // so we have to reassign it to allow the full unstake\n        if (sharesRemove > s.shares) sharesRemove = s.shares;\n\n        unchecked {\n            s.shares -= sharesRemove;\n        }\n        v.totalShares -= sharesRemove;\n\n        // remove staked tokens\n        unchecked {\n            s.staked -= amount;\n        }\n        // create unstaking instance\n        uint128 coolDownEnd = uint128(v.disabledAtBlock != 0 ? v.disabledAtBlock : block.number);\n        unchecked {\n            coolDownEnd += (isValidator ? validatorCoolDown : delegatorCoolDown);\n        }\n        uint128 unstakeId = uint128(v.unstakings[msg.sender].length);\n        v.unstakings[msg.sender].push(Unstaking(coolDownEnd, amount));\n        emit Unstaked(validatorId, msg.sender, amount, unstakeId);\n    }\n\n    /*\n     * Restakes unstaked tokens\n     */\n    function recoverUnstaking(\n        uint128 amount,\n        uint128 validatorId,\n        uint128 unstakingId\n    ) external {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(_validators[validatorId].unstakings[msg.sender].length > unstakingId, \"Unstaking does not exist\");\n        Unstaking storage us = _validators[validatorId].unstakings[msg.sender][unstakingId];\n        require(us.amount >= amount, \"Unstaking has less tokens\");\n        unchecked {\n            us.amount -= amount;\n        }\n        // set cool down end to 0 to release gas if new unstaking amount is 0\n        if (us.amount == 0) us.coolDownEnd = 0;\n        emit RecoveredUnstake(validatorId, msg.sender, amount, unstakingId);\n        _stake(validatorId, amount, false);\n    }\n\n    /*\n     * Transfers out unlocked unstaked tokens back to the delegator\n     */\n    function transferUnstakedOut(\n        uint128 amount,\n        uint128 validatorId,\n        uint128 unstakingId\n    ) external {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(_validators[validatorId].unstakings[msg.sender].length > unstakingId, \"Unstaking does not exist\");\n        Unstaking storage us = _validators[validatorId].unstakings[msg.sender][unstakingId];\n        require(uint128(block.number) > us.coolDownEnd, \"Cooldown period has not ended\");\n        require(us.amount >= amount, \"Amount is too high\");\n        unchecked {\n            us.amount -= amount;\n        }\n        // set cool down end to 0 to release gas if new unstaking amount is 0\n        if (us.amount == 0) us.coolDownEnd = 0;\n        emit UnstakeRedeemed(validatorId, msg.sender, unstakingId, amount);\n        _transferFromContract(msg.sender, amount);\n    }\n\n    /*\n     * Redeems all available rewards\n     */\n    function redeemAllRewards(uint128 validatorId, address beneficiary) external {\n        _redeemRewards(validatorId, beneficiary, 0); // pass 0 to request full amount\n    }\n\n    /*\n     * Redeems partial rewards\n     */\n    function redeemRewards(\n        uint128 validatorId,\n        address beneficiary,\n        uint128 amount\n    ) external {\n        require(amount > 0, \"Amount is 0\");\n        _redeemRewards(validatorId, beneficiary, amount);\n    }\n\n    function _redeemRewards(\n        uint128 validatorId,\n        address beneficiary,\n        uint128 amount\n    ) internal {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(beneficiary != address(0x0), \"Invalid beneficiary\");\n        Validator storage v = _validators[validatorId];\n        Staking storage s = v.stakings[msg.sender];\n\n        // how many tokens a delegator/validator has in total on the contract\n        // include earned commission if the delegator is the validator\n        uint128 totalValue = _sharesToTokens(s.shares, v.exchangeRate);\n\n        bool redeemAll = amount == 0; // amount is 0 when it's requested to redeem all rewards\n        if (redeemAll) {\n            // can only redeem > redeem threshold\n            require(totalValue - s.staked >= REWARD_REDEEM_THRESHOLD, \"Nothing to redeem\");\n        }\n        // making sure that amount of rewards exist\n        else {\n            require(totalValue - s.staked >= amount, \"Requested amount is too high\");\n            require(amount >= REWARD_REDEEM_THRESHOLD, \"Requested amount must be higher than redeem threshold\");\n        }\n\n        uint128 amountToRedeem = redeemAll ? totalValue - s.staked : amount;\n\n        // \"sell/burn\" the reward shares\n        uint128 validatorSharesRemove = _tokensToShares(amountToRedeem, v.exchangeRate);\n        if (validatorSharesRemove > s.shares) validatorSharesRemove = s.shares;\n        unchecked {\n            v.totalShares -= validatorSharesRemove;\n        }\n        unchecked {\n            s.shares -= validatorSharesRemove;\n        }\n\n        emit RewardRedeemed(validatorId, beneficiary, amountToRedeem);\n        _transferFromContract(beneficiary, amountToRedeem);\n    }\n\n    function redeemCommission(\n        uint128 validatorId,\n        address beneficiary,\n        uint128 amount\n    ) public {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        require(beneficiary != address(0x0), \"Invalid beneficiary\");\n        Validator storage v = _validators[validatorId];\n        require(v._address == msg.sender, \"The sender is not the validator\");\n\n        require(v.commissionAvailableToRedeem > 0, \"No commission available to redeem\");\n        require(amount > 0, \"The requested amount is 0\");\n        require(amount <= v.commissionAvailableToRedeem, \"Requested amount is higher than commission available to redeem\");\n        unchecked {\n            v.commissionAvailableToRedeem -= amount;\n        }\n\n        _transferFromContract(beneficiary, amount);\n        emit CommissionRewardRedeemed(validatorId, beneficiary, amount);\n    }\n\n    function redeemAllCommission(uint128 validatorId, address beneficiary) external {\n        redeemCommission(validatorId, beneficiary, _validators[validatorId].commissionAvailableToRedeem);\n    }\n\n    /*\n     * Redelegates tokens to another validator if a validator got disabled.\n     * First the tokens need to be unstaked\n     */\n    function redelegateUnstaked(\n        uint128 amount,\n        uint128 oldValidatorId,\n        uint128 newValidatorId,\n        uint128 unstakingId\n    ) external {\n        require(oldValidatorId < validatorsN, \"Invalid validator\");\n        Validator storage v = _validators[oldValidatorId];\n        require(v.disabledAtBlock != 0, \"Validator is not disabled\");\n        require(v._address != msg.sender, \"Validator cannot redelegate\");\n        require(v.unstakings[msg.sender].length > unstakingId, \"Unstaking does not exist\");\n        Unstaking storage us = v.unstakings[msg.sender][unstakingId];\n        require(us.amount >= amount, \"Unstaking has less tokens\");\n        // stake tokens back to the contract using new validator, set withTransfer to false since the tokens are already in the contract\n        unchecked {\n            us.amount -= amount;\n        }\n        // set cool down end to 0 to release gas if new unstaking amount is 0\n        if (us.amount == 0) us.coolDownEnd = 0;\n        emit Redelegated(oldValidatorId, newValidatorId, msg.sender, amount, unstakingId);\n        _stake(newValidatorId, amount, false);\n    }\n\n    /*\n     * Changes the validator staking address, this will transfer validator staking data and optionally unstakings\n     */\n    function setValidatorAddress(uint128 validatorId, address newAddress) external {\n        Validator storage v = _validators[validatorId];\n        require(msg.sender == v._address, \"Sender is not the validator\");\n        require(v._address != newAddress, \"The new address cannot be equal to the current validator address\");\n        require(newAddress != address(0), \"Invalid validator address\");\n\n        v.stakings[newAddress].shares += v.stakings[msg.sender].shares;\n        v.stakings[newAddress].staked += v.stakings[msg.sender].staked;\n        delete v.stakings[msg.sender];\n\n        Unstaking[] storage oldUnstakings = v.unstakings[msg.sender];\n        uint256 length = oldUnstakings.length;\n        require(length <= 300, \"Cannot transfer more than 300 unstakings\");\n        Unstaking[] storage newUnstakings = v.unstakings[newAddress];\n        for (uint128 i = 0; i < length; ++i) {\n            newUnstakings.push(oldUnstakings[i]);\n        }\n        delete v.unstakings[msg.sender];\n\n        v._address = newAddress;\n        emit ValidatorAddressChanged(validatorId, newAddress);\n    }\n\n    /*\n     * Gets metadata\n     */\n    function getMetadata()\n        external\n        view\n        returns (\n            address CQTaddress,\n            address _stakingManager,\n            uint128 _validatorsN,\n            uint128 _rewardPool,\n            uint128 _validatorCoolDown,\n            uint128 _delegatorCoolDown,\n            uint128 _maxCapMultiplier,\n            uint128 _validatorMaxStake\n        )\n    {\n        return (address(CQT), stakingManager, validatorsN, rewardPool, validatorCoolDown, delegatorCoolDown, maxCapMultiplier, validatorMaxStake);\n    }\n\n    /*\n     * Returns validator metadata with how many tokens were staked and delegated excluding compounded rewards\n     */\n    function getValidatorMetadata(uint128 validatorId)\n        public\n        view\n        returns (\n            address _address,\n            uint128 staked,\n            uint128 delegated,\n            uint128 commissionRate,\n            uint256 disabledAtBlock\n        )\n    {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        Validator storage v = _validators[validatorId];\n        return (v._address, v.stakings[v._address].staked, v.delegated, v.commissionRate, v.disabledAtBlock);\n    }\n\n    /*\n     * Returns metadata for each validator\n     */\n    function getAllValidatorsMetadata()\n        external\n        view\n        returns (\n            address[] memory addresses,\n            uint128[] memory staked,\n            uint128[] memory delegated,\n            uint128[] memory commissionRates,\n            uint256[] memory disabledAtBlocks\n        )\n    {\n        return getValidatorsMetadata(0, validatorsN);\n    }\n\n    /*\n     * Returns metadata for validators whose ids are between startId and endId exclusively\n     */\n    function getValidatorsMetadata(uint128 startId, uint128 endId)\n        public\n        view\n        returns (\n            address[] memory addresses,\n            uint128[] memory staked,\n            uint128[] memory delegated,\n            uint128[] memory commissionRates,\n            uint256[] memory disabledAtBlocks\n        )\n    {\n        require(endId <= validatorsN, \"Invalid end id\");\n        require(startId < endId, \"Start id must be less than end id\");\n\n        uint128 n = endId - startId;\n        addresses = new address[](n);\n        staked = new uint128[](n);\n        delegated = new uint128[](n);\n        commissionRates = new uint128[](n);\n        disabledAtBlocks = new uint256[](n);\n\n        uint128 i;\n        for (uint128 id = startId; id < endId; ++id) {\n            i = id - startId;\n            (addresses[i], staked[i], delegated[i], commissionRates[i], disabledAtBlocks[i]) = getValidatorMetadata(id);\n        }\n        return (addresses, staked, delegated, commissionRates, disabledAtBlocks);\n    }\n\n    /*\n     * Returns validator staked and delegated token amounts, excluding compounded rewards\n     */\n    function getValidatorStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated) {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        Validator storage v = _validators[validatorId];\n        return (v.stakings[v._address].staked, v.delegated);\n    }\n\n    /*\n     * Returns validator staked and delegated token amounts, including compounded rewards\n     */\n    function getValidatorCompoundedStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated) {\n        Validator storage v = _validators[validatorId];\n        // this includes staked + compounded rewards\n        staked = _sharesToTokens(v.stakings[v._address].shares, v.exchangeRate);\n        // this includes delegated + compounded rewards\n        delegated = _sharesToTokens(v.totalShares, v.exchangeRate) - staked;\n        return (staked, delegated);\n    }\n\n    /*\n     * Returns the amount that's staked, earned by delegator plus unstaking information.\n     * CommissionEarned is for validators\n     */\n    function getDelegatorMetadata(address delegator, uint128 validatorId)\n        external\n        view\n        returns (\n            uint128 staked,\n            uint128 rewards,\n            uint128 commissionEarned,\n            uint128[] memory unstakingAmounts,\n            uint128[] memory unstakingsEndEpochs\n        )\n    {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        Validator storage v = _validators[validatorId];\n        Staking storage s = v.stakings[delegator];\n        staked = s.staked;\n        uint128 sharesValue = _sharesToTokens(s.shares, v.exchangeRate);\n        if (sharesValue <= s.staked) rewards = 0;\n        else rewards = sharesValue - s.staked;\n        // if requested delegator is the requested validator\n        if (v._address == delegator) commissionEarned = v.commissionAvailableToRedeem;\n        Unstaking[] memory unstakings = v.unstakings[delegator];\n        uint256 unstakingsN = unstakings.length;\n        unstakingAmounts = new uint128[](unstakingsN);\n        unstakingsEndEpochs = new uint128[](unstakingsN);\n        for (uint256 i = 0; i < unstakingsN; i++) {\n            unstakingAmounts[i] = unstakings[i].amount;\n            unstakingsEndEpochs[i] = unstakings[i].coolDownEnd;\n        }\n        return (staked, rewards, commissionEarned, unstakingAmounts, unstakingsEndEpochs);\n    }\n\n    function renounceOwnership() public virtual override onlyOwner {}\n}\n"
        },
        "./contracts/BlockResultProofChain.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IOperationalStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract BlockResultProofChain is OwnableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\n\n    IOperationalStaking _stakingInterface; // staking contract\n\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    bytes32 public constant BLOCK_RESULT_PRODUCER_ROLE = keccak256(\"BLOCK_RESULT_PRODUCER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    uint256 private constant _DIVIDER = 10**18; // 18 decimals used for scaling\n\n    uint256 private _blockResultQuorum; // The value is represented as a uint <= 10**18. The threshold value will later be divided by 10**18 to represent it as a percentage.  e.g.) 10**18 == 100%; 5 * 10**17 == 50%;\n    uint256 private _secondsPerBlock; // average block time on the chain where the ProofChain is deployed\n    uint128 private _blockResultRewardAllocation; // the reward allocated per block hash\n    uint128 private _brpRequiredStake; // how much a validator should have staked in order to run an operator\n    uint64 private _blockResultSessionDuration; // the length of a session in blocks\n    uint64 private _minSubmissionsRequired; // min number of participants who submitted the agreed result hash in order for the quorum to be achieved\n\n    EnumerableSetUpgradeable.Bytes32Set private _roleNames; // set of all role names\n\n    EnumerableSetUpgradeable.AddressSet private _blockResultProducers; // currently enabled block result producer operators\n    EnumerableSetUpgradeable.AddressSet private _governors; // governor operators\n    EnumerableSetUpgradeable.AddressSet private _auditors; // auditor operators\n\n    mapping(address => uint128) public validatorIDs; // maps an operator address to validatorId\n    mapping(uint128 => EnumerableSetUpgradeable.AddressSet) private _validatorOperators; // operator addresses that validator owns\n    mapping(address => bytes32) public operatorRoles; // operator address => role\n    mapping(uint128 => uint128) private _validatorActiveOperatorsCounters; // how many operators are enabled per validator given validator id\n    mapping(uint64 => mapping(uint64 => BlockResultSession)) private _sessions; // chainId => blockHeight\n    mapping(uint64 => ChainData) private _chainData; // by chain id\n\n    mapping(bytes32 => string[]) private _urls; // hash => urls\n\n    struct ChainData {\n        uint256 blockOnTargetChain; // block number on the chain for which BRP are produced which is mapped to the current chain block\n        uint256 blockOnCurrentChain; // block number on the chain where the ProofChain is deployed. it is mapped to the target chain block\n        uint256 secondsPerBlock; // average block time on the chain for which BRP is generated\n        uint128 allowedThreshold; // block offsett threshold, used to handle minor de-synchronization over time\n        uint128 maxSubmissionsPerBlockHeight; // max number of block hashes allowed to submit per block height\n        uint64 nthBlock; // block divisor\n    }\n\n    struct BlockSpecimenHash {\n        mapping(bytes32 => address[]) participants; // result hash => operators who submitted the result hash\n        bytes32[] resultHashes; // raw result hashes\n    }\n\n    struct SessionParticipantData {\n        uint128 stake; // stake at the time when an operator submitted the first result hash\n        uint128 submissionCounter; // how many result hashes an operator has submitted\n    }\n\n    struct BlockResultSession {\n        mapping(bytes32 => BlockSpecimenHash) blockSpecimenHashes;\n        bytes32[] blockSpecimenHashesRaw;\n        mapping(address => SessionParticipantData) participantsData; // stake and submission counter, pack these together to save gas\n        uint64 sessionDeadline; // the last block when an operator can submit a result hash\n        bool requiresAudit; // auditor can arbitrate the session only if this is set to true\n    }\n\n    event OperatorAdded(address operator, uint128 validatorId, bytes32 role);\n\n    event OperatorRemoved(address operator);\n\n    event OperatorEnabled(address operator);\n\n    event OperatorDisabled(address operator);\n\n    event BlockResultProductionProofSubmitted(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash, // SHA-256 content-hash of result object file;\n        string storageURL, // URL of result storage\n        uint128 submittedStake\n    );\n\n    event SessionStarted(uint64 indexed chainId, uint64 indexed blockHeight, uint64 deadline);\n\n    event BlockResultRewardAwarded(uint64 indexed chainId, uint64 indexed blockHeight, bytes32 indexed blockSpecimenHash, bytes32 resulthash);\n\n    event QuorumNotReached(uint64 indexed chainId, uint64 blockHeight);\n\n    event BlockResultRewardChanged(uint128 newBlockResultRewardAllocation);\n\n    event MinimumRequiredStakeChanged(uint128 newStakeRequirement);\n\n    event StakingInterfaceChanged(address newInterfaceAddress);\n\n    event ResultSessionQuorumChanged(uint256 newQuorumThreshold);\n\n    event ResultSessionDurationChanged(uint64 newSessionDuration);\n\n    event ResultSessionMinSubmissionChanged(uint64 minSubmissions);\n\n    event NthBlockChanged(uint64 indexed chainId, uint64 indexed nthBlock);\n\n    event MaxSubmissionsPerBlockHeightChanged(uint256 maxSubmissions);\n\n    event ChainSyncDataChanged(uint64 indexed chainId, uint256 blockOnTargetChain, uint256 blockOnCurrentChain, uint256 secondsPerBlock);\n\n    event SecondsPerBlockChanged(uint64 indexed secondsPerBlock);\n\n    event BlockHeightSubmissionThresholdChanged(uint64 indexed chainId, uint64 threshold);\n\n    modifier onlyGovernor() {\n        require(_governors.contains(msg.sender), \"Sender is not GOVERNANCE_ROLE\");\n        _;\n    }\n\n    /**\n     * Operators will have multiple addresses: the address they submit the proofs from and the address that manages staking and operator instances\n     */\n    modifier onlyOperatorManager(address operator) {\n        (address validatorAddress, , , ) = _stakingInterface.getValidatorMetadata(validatorIDs[operator]);\n        require(validatorAddress == msg.sender, \"Sender is not operator manager\");\n        _;\n    }\n\n    function initialize(address initialOwner, address stakingContract) public initializer {\n        __Ownable_init();\n\n        _governors.add(msg.sender);\n\n        _roleNames.add(GOVERNANCE_ROLE);\n        _roleNames.add(BLOCK_RESULT_PRODUCER_ROLE);\n        _roleNames.add(AUDITOR_ROLE);\n\n        setQuorumThreshold(_DIVIDER / 2); // 50%\n        setBlockResultReward(10**14); // 0.0001\n        setBlockResultSessionDuration(240); // blocks\n        setMinSubmissionsRequired(2);\n        setStakingInterface(stakingContract);\n        _governors.remove(msg.sender);\n\n        operatorRoles[initialOwner] = GOVERNANCE_ROLE;\n        _governors.add(initialOwner);\n        emit OperatorAdded(initialOwner, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Adds operator on the staking contract\n     */\n    function addValidator(address validator, uint128 commissionRate) external onlyGovernor {\n        _stakingInterface.addValidator(validator, commissionRate);\n    }\n\n    /**\n     * Disables the given operator on the staking contract\n     */\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external onlyGovernor {\n        _stakingInterface.disableValidator(validatorId, blockNumber);\n    }\n\n    /**\n     * Disables the operator instance.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function _removeBRPOperatorFromActiveInstances(address operator) internal {\n        _blockResultProducers.remove(operator);\n        uint128 validatorId = validatorIDs[operator];\n        _validatorActiveOperatorsCounters[validatorId]--;\n        // if there are not more enabled operators left we need to disable the validator instance too\n        if (_validatorActiveOperatorsCounters[validatorId] == 0) _stakingInterface.disableValidator(validatorId, block.number);\n    }\n\n    /**\n     * Enables the operator instance. The operators need to call that function before they can start submitting proofs\n     */\n    function enableBRPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        require(!_blockResultProducers.contains(operator), \"Operator is already enabled\");\n        uint128 validatorId = validatorIDs[operator];\n        _blockResultProducers.add(operator);\n        _validatorActiveOperatorsCounters[validatorId]++;\n        // if no operator was enabled we need to enable the validator instance\n        if (_validatorActiveOperatorsCounters[validatorId] == 1) _stakingInterface.enableValidator(validatorId);\n        emit OperatorEnabled(operator);\n    }\n\n    /**\n     * Disables the operator instance. The operator cannot submit proofs its instance got disabled.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function disableBRPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        require(_blockResultProducers.contains(operator), \"Operator is already disabled\");\n        _removeBRPOperatorFromActiveInstances(operator);\n        emit OperatorDisabled(operator);\n    }\n\n    /**\n     * Adds the given address to the block result producers set\n     */\n    function addBRPOperator(address operator, uint128 validatorId) external onlyGovernor {\n        require(operatorRoles[operator] == 0, \"Operator already exists\");\n        operatorRoles[operator] = BLOCK_RESULT_PRODUCER_ROLE;\n        validatorIDs[operator] = validatorId;\n        _validatorOperators[validatorId].add(operator);\n        emit OperatorAdded(operator, validatorId, BLOCK_RESULT_PRODUCER_ROLE);\n    }\n\n    /**\n     * Removes the given address from the block result producers set\n     */\n    function removeBRPOperator(address operator) external onlyGovernor {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        if (_blockResultProducers.contains(operator)) _removeBRPOperatorFromActiveInstances(operator);\n        _validatorOperators[validatorIDs[operator]].remove(operator);\n        validatorIDs[operator] = 0;\n        operatorRoles[operator] = 0;\n        emit OperatorRemoved(operator);\n    }\n\n    /**\n     * Adds the given address to the auditors set\n     */\n    function addAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == 0, \"Operator already exists\");\n        operatorRoles[auditor] = AUDITOR_ROLE;\n        _auditors.add(auditor);\n        emit OperatorAdded(auditor, 0, AUDITOR_ROLE);\n    }\n\n    /**\n     * Removes the given address from the auditors set\n     */\n    function removeAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == AUDITOR_ROLE, \"Operator is not auditor\");\n        operatorRoles[auditor] = 0;\n        _auditors.remove(auditor);\n        emit OperatorRemoved(auditor);\n    }\n\n    /**\n     * Adds the given address to the governors set\n     */\n    function addGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == 0, \"Operator already exists\");\n        operatorRoles[governor] = GOVERNANCE_ROLE;\n        _governors.add(governor);\n        emit OperatorAdded(governor, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Removes the given address from the governors set\n     */\n    function removeGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == GOVERNANCE_ROLE, \"Operator is not governor\");\n        operatorRoles[governor] = 0;\n        _governors.remove(governor);\n        emit OperatorRemoved(governor);\n    }\n\n    /**\n     * Updates the amount of tokens required to stake in order to be able to submit the proofs\n     */\n    function setBRPRequiredStake(uint128 newStakeAmount) public onlyGovernor {\n        _brpRequiredStake = newStakeAmount;\n        emit MinimumRequiredStakeChanged(newStakeAmount);\n    }\n\n    /**\n     * Updates the address of the staking contract\n     */\n    function setStakingInterface(address stakingContractAddress) public onlyGovernor {\n        _stakingInterface = IOperationalStaking(stakingContractAddress);\n        emit StakingInterfaceChanged(stakingContractAddress);\n    }\n\n    /**\n     * Update the Block Result Quorum Threshold.\n     */\n    function setQuorumThreshold(uint256 quorum) public onlyGovernor {\n        _blockResultQuorum = quorum;\n        emit ResultSessionQuorumChanged(quorum);\n    }\n\n    /**\n     * Update block divisor\n     */\n    function setNthBlock(uint64 chainId, uint64 n) public onlyGovernor {\n        _chainData[chainId].nthBlock = n;\n        emit NthBlockChanged(chainId, n);\n    }\n\n    /**\n     * Update the reward allocation per block result.\n     */\n    function setBlockResultReward(uint128 newBlockResultReward) public onlyGovernor {\n        _blockResultRewardAllocation = newBlockResultReward;\n        emit BlockResultRewardChanged(newBlockResultReward);\n    }\n\n    /**\n     * Update the duration of a result session in blocks\n     */\n    function setBlockResultSessionDuration(uint64 newSessionDuration) public onlyGovernor {\n        _blockResultSessionDuration = newSessionDuration;\n        emit ResultSessionDurationChanged(newSessionDuration);\n    }\n\n    /**\n     * Update the minimum # of submissions required in order to reach quorum\n     */\n    function setMinSubmissionsRequired(uint64 minSubmissions) public onlyGovernor {\n        _minSubmissionsRequired = minSubmissions;\n        emit ResultSessionMinSubmissionChanged(minSubmissions);\n    }\n\n    /**\n     * Update the max # of submissions per operator per block height\n     */\n    function setMaxSubmissionsPerBlockHeight(uint64 chainId, uint64 maxSubmissions) public onlyGovernor {\n        _chainData[chainId].maxSubmissionsPerBlockHeight = maxSubmissions;\n        emit MaxSubmissionsPerBlockHeightChanged(maxSubmissions);\n    }\n\n    /**\n     * Update chain sync data\n     */\n    function setChainSyncData(\n        uint64 chainId,\n        uint256 blockOnTargetChain,\n        uint256 blockOnCurrentChain,\n        uint256 secondsPerBlock\n    ) external onlyGovernor {\n        ChainData storage cd = _chainData[chainId];\n        require(secondsPerBlock > 0, \"Seconds per block cannot be 0\");\n        cd.blockOnTargetChain = blockOnTargetChain;\n        cd.blockOnCurrentChain = blockOnCurrentChain;\n        cd.secondsPerBlock = secondsPerBlock;\n        emit ChainSyncDataChanged(chainId, blockOnTargetChain, blockOnCurrentChain, secondsPerBlock);\n    }\n\n    /**\n     * Update block height submission threshold for live sync\n     */\n    function setBlockHeightSubmissionsThreshold(uint64 chainId, uint64 threshold) external onlyGovernor {\n        _chainData[chainId].allowedThreshold = threshold;\n        emit BlockHeightSubmissionThresholdChanged(chainId, threshold);\n    }\n\n    /**\n     * Update seconds per block on the chain where the ProofChain is deployed\n     */\n    function setSecondsPerBlock(uint64 secondsPerBlock) external onlyGovernor {\n        _secondsPerBlock = secondsPerBlock;\n        emit SecondsPerBlockChanged(secondsPerBlock);\n    }\n\n    /**\n     * Block Result Producers submit their block result proofs using this function.\n     */\n    function submitBlockResultProof(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash,\n        string calldata storageURL\n    ) external {\n        require(_blockResultProducers.contains(msg.sender), \"Sender is not BLOCK_RESULT_PRODUCER_ROLE\");\n        ChainData storage cd = _chainData[chainId];\n        require(cd.nthBlock != 0, \"Invalid chain ID\");\n        require(blockHeight % cd.nthBlock == 0, \"Invalid block height\");\n\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[msg.sender];\n\n        // if this is the first result to be submitted for a block, initialize a new session\n        if (sessionDeadline == 0) {\n            require(!session.requiresAudit, \"Session submissions have closed\");\n\n            uint256 currentBlockOnTargetChain = cd.blockOnTargetChain + (((block.number - cd.blockOnCurrentChain) * _secondsPerBlock) / cd.secondsPerBlock);\n            uint256 lowerBound = currentBlockOnTargetChain >= cd.allowedThreshold ? currentBlockOnTargetChain - cd.allowedThreshold : 0;\n            require(lowerBound <= blockHeight && blockHeight <= currentBlockOnTargetChain + cd.allowedThreshold, \"Block height is out of bounds for live sync\");\n\n            session.sessionDeadline = uint64(block.number + _blockResultSessionDuration);\n            (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n            require(baseStake >= _brpRequiredStake, \"Insufficiently staked to submit\");\n            participantsData.stake = baseStake + delegateStakes;\n\n            session.blockSpecimenHashesRaw.push(blockSpecimenHash);\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[blockSpecimenHash];\n            bh.resultHashes.push(resultHash);\n\n            bh.participants[resultHash].push(msg.sender);\n            participantsData.submissionCounter++;\n            emit SessionStarted(chainId, blockHeight, session.sessionDeadline);\n        } else {\n            require(block.number <= sessionDeadline, \"Session submissions have closed\");\n            require(participantsData.submissionCounter < cd.maxSubmissionsPerBlockHeight, \"Max submissions limit exceeded\");\n\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[blockSpecimenHash];\n            bytes32[] storage resultHashes = bh.resultHashes;\n            if (participantsData.stake != 0) {\n                // check if it was submitted for the same block hash\n                // this should be at most 10 iterations\n                for (uint256 j = 0; j < resultHashes.length; j++) {\n                    address[] storage resultHashParticipants = bh.participants[resultHashes[j]];\n                    for (uint256 k = 0; k < resultHashParticipants.length; k++)\n                        require(resultHashParticipants[k] != msg.sender, \"Operator already submitted for the provided block hash\");\n                }\n            } else {\n                (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n                require(baseStake >= _brpRequiredStake, \"Insufficiently staked to submit\");\n                participantsData.stake = baseStake + delegateStakes;\n            }\n\n            address[] storage participants = bh.participants[resultHash];\n            if (resultHashes.length != 0) {\n                if (participants.length == 0) resultHashes.push(resultHash);\n            } else {\n                session.blockSpecimenHashesRaw.push(blockSpecimenHash);\n                resultHashes.push(resultHash);\n            }\n\n            participants.push(msg.sender);\n            participantsData.submissionCounter++;\n        }\n        _urls[resultHash].push(storageURL);\n\n        emit BlockResultProductionProofSubmitted(chainId, blockHeight, blockSpecimenHash, resultHash, storageURL, participantsData.stake);\n    }\n\n    /**\n     * This function is called when a quorum of equivalent hashes have been submitted for a Block Result Session.\n     */\n    function finalizeAndRewardResultSession(uint64 chainId, uint64 blockHeight) public {\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        require(block.number > sessionDeadline, \"Session not past deadline\");\n        require(!session.requiresAudit, \"Session cannot be finalized\");\n        require(sessionDeadline != 0, \"Session not started\");\n\n        uint256 contributorsN;\n        bytes32 resultHash;\n\n        uint256 max;\n        bytes32 agreedBlockSpecimenHash;\n        bytes32 agreedResultHash;\n\n        bytes32[] storage blockSpecimenHashesRaw = session.blockSpecimenHashesRaw;\n        bytes32 rawBlockSpecimenHash;\n\n        // find the block hash and result hashes that the quorum agrees on by finding the result hash with the highest number of participants\n        for (uint256 i = 0; i < blockSpecimenHashesRaw.length; i++) {\n            rawBlockSpecimenHash = blockSpecimenHashesRaw[i];\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[rawBlockSpecimenHash];\n            for (uint256 j = 0; j < bh.resultHashes.length; j++) {\n                resultHash = bh.resultHashes[j];\n                uint256 len = bh.participants[resultHash].length;\n                contributorsN += len;\n                if (len > max) {\n                    max = len;\n                    agreedBlockSpecimenHash = rawBlockSpecimenHash;\n                    agreedResultHash = resultHash;\n                }\n            }\n        }\n        // check if the number of submissions is sufficient and if the quorum is achieved\n        if (_minSubmissionsRequired <= max && (max * _DIVIDER) / contributorsN > _blockResultQuorum)\n            _rewardParticipants(session, chainId, blockHeight, agreedBlockSpecimenHash, agreedResultHash);\n        else emit QuorumNotReached(chainId, blockHeight);\n\n        session.requiresAudit = true;\n        // set session deadline to 0 to release gas\n        session.sessionDeadline = 0;\n    }\n\n    /**\n     * Called by Auditor role when a quorum is not reached. The auditor's submitted hash is\n     * the definitive truth.\n     */\n    function arbitrateBlockResultSession(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 definitiveResultHash\n    ) public {\n        require(_auditors.contains(msg.sender), \"Sender is not AUDITOR_ROLE\");\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        require(session.requiresAudit, \"Session must be finalized before audit\");\n        _rewardParticipants(session, chainId, blockHeight, blockSpecimenHash, definitiveResultHash);\n    }\n\n    function _rewardParticipants(\n        BlockResultSession storage session,\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash\n    ) internal {\n        address participant;\n        address[] storage participants = session.blockSpecimenHashes[blockSpecimenHash].participants[resultHash];\n        uint256 len = participants.length;\n        uint128[] memory ids = new uint128[](len);\n        uint128[] memory rewards = new uint128[](len);\n        uint128 totalStake;\n        mapping(address => SessionParticipantData) storage participantsData = session.participantsData;\n        for (uint256 i = 0; i < len; i++) {\n            totalStake += participantsData[participants[i]].stake;\n        }\n        for (uint256 i = 0; i < len; i++) {\n            participant = participants[i];\n            SessionParticipantData storage pd = participantsData[participant];\n            ids[i] = validatorIDs[participant];\n            rewards[i] = uint128((uint256(pd.stake) * uint256(_blockResultRewardAllocation)) / totalStake);\n            // release gas if possible\n            if (pd.submissionCounter == 1) {\n                pd.submissionCounter = 0;\n                pd.stake = 0;\n            }\n        }\n        _stakingInterface.rewardValidators(ids, rewards);\n        emit BlockResultRewardAwarded(chainId, blockHeight, blockSpecimenHash, resultHash);\n\n        delete session.blockSpecimenHashes[blockSpecimenHash]; // release gas\n    }\n\n    /**\n     * Returns contract meta data\n     */\n    function getMetadata()\n        public\n        view\n        returns (\n            address stakingInterface,\n            uint128 blockResultRewardAllocation,\n            uint64 blockResultSessionDuration,\n            uint64 minSubmissionsRequired,\n            uint256 blockResultQuorum,\n            uint256 secondsPerBlock\n        )\n    {\n        return (address(_stakingInterface), _blockResultRewardAllocation, _blockResultSessionDuration, _minSubmissionsRequired, _blockResultQuorum, _secondsPerBlock);\n    }\n\n    /**\n     * Returns data used for chain sync\n     */\n    function getChainData(uint64 chainId)\n        external\n        view\n        returns (\n            uint256 blockOnTargetChain,\n            uint256 blockOnCurrentChain,\n            uint256 secondsPerBlock,\n            uint128 allowedThreshold,\n            uint128 maxSubmissionsPerBlockHeight,\n            uint64 nthBlock\n        )\n    {\n        ChainData memory cd = _chainData[chainId];\n        return (cd.blockOnTargetChain, cd.blockOnCurrentChain, cd.secondsPerBlock, cd.allowedThreshold, cd.maxSubmissionsPerBlockHeight, cd.nthBlock);\n    }\n\n    /**\n     * Returns all brp operator addresses (disabled and enabled) of a given validator\n     */\n    function getOperators(uint128 validatorId) external view returns (address[] memory) {\n        return _validatorOperators[validatorId].values();\n    }\n\n    /**\n     * Returns all enabled operators by role type\n     */\n    function getAllOperators()\n        external\n        view\n        returns (\n            address[] memory _brps,\n            address[] memory __governors,\n            address[] memory __auditors\n        )\n    {\n        return (_blockResultProducers.values(), _governors.values(), _auditors.values());\n    }\n\n    /**\n     * Returns required stake and enabled block result producer operators\n     */\n    function getBRPRoleData() external view returns (uint128 requiredStake, address[] memory activeMembers) {\n        return (_brpRequiredStake, _blockResultProducers.values());\n    }\n\n    /**\n     * Returns true if the given operator is enabled.\n     * Returns false if the operator is disabled or does not exist\n     */\n    function isEnabled(address operator) external view returns (bool) {\n        return _blockResultProducers.contains(operator);\n    }\n\n    /**\n     * Returns IPFS urls where results reside\n     */\n    function getURLS(bytes32 resulthash) external view returns (string[] memory) {\n        return _urls[resulthash];\n    }\n\n    /**\n     * This function is called to check whether the sesion is open for the given chain id and block height\n     */\n    function isSessionOpen(\n        uint64 chainId,\n        uint64 blockHeight,\n        address operator\n    ) public view returns (bool) {\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[operator];\n        bool submissionLimitExceeded = participantsData.submissionCounter == _chainData[chainId].maxSubmissionsPerBlockHeight;\n        return (!submissionLimitExceeded && block.number <= sessionDeadline) || (sessionDeadline == 0 && !session.requiresAudit);\n    }\n}\n"
        },
        "./contracts/ERC20Permit/ERC20Permit.sol": {
            "content": "pragma solidity ^0.8.4;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Counters} from \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./IERC2612Permit.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to use their tokens\n * without sending any transactions by setting {IERC20-allowance} with a\n * signature using the {permit} method, and then spend them via\n * {IERC20-transferFrom}.\n */\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    bytes32 public DOMAIN_SEPARATOR;\n\n    constructor() internal {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                keccak256(bytes(\"1\")), // Version\n                chainID,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC2612Permit-permit}.\n     * v,r,s params are ecdsa signature output for more information please see ethereum ecdsa specs.\n     * Apendix-f of https://ethereum.github.io/yellowpaper/paper.pdf.\n     * @param owner token owner\n     * @param spender user address which is allowed to spend tokens\n     * @param amount number of token to be spent\n     * @param deadline validity for spending the tokens\n     * @param v recovery identifier of ecdsa signature\n     * @param r r value/ x-value of ecdsa signature\n     * @param s s value of ecdsa signature\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"CovalentPermit: expired deadline\");\n\n        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\n\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\n\n        address signer = ecrecover(_hash, v, r, s);\n        require(signer != address(0) && signer == owner, \"CovalentPermit: Invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, amount);\n    }\n\n    /**\n     * @dev See {IERC2612Permit-nonces}.\n     * @param owner token owner\n     * @return current nonce of the owner address\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n}\n"
        },
        "./contracts/ERC20Permit/IERC2612Permit.sol": {
            "content": "pragma solidity ^0.8.4;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n * https://github.com/nventuro/openzeppelin-contracts/blob/erc20-permit/contracts/token/ERC20/IERC2612Permit.sol\n * Commit 48c41dfc625edeac829a803a4cc0d02de3638705\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612Permit {\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n}\n"
        },
        "./contracts/ERC20Permit/README.md": {
            "content": "## EIP-2612: permit – 712-signed approvals implementation\n\nhttps://eips.ethereum.org/EIPS/eip-2612"
        },
        "./contracts/BlockSpecimenProofChain.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IOperationalStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract BlockSpecimenProofChain is OwnableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\n\n    IOperationalStaking _stakingInterface; // staking contract\n\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    bytes32 public constant BLOCK_SPECIMEN_PRODUCER_ROLE = keccak256(\"BLOCK_SPECIMEN_PRODUCER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    uint256 private constant _DIVIDER = 10**18; // 18 decimals used for scaling\n\n    uint256 private _blockSpecimenQuorum; // The value is represented as a uint <= 10**18. The threshold value will later be divided by 10**18 to represent it as a percentage.  e.g.) 10**18 == 100%; 5 * 10**17 == 50%;\n    uint256 private _secondsPerBlock; // average block time on the chain where the ProofChain is deployed\n    uint128 private _blockSpecimenRewardAllocation; // the reward allocated per block hash\n    uint128 private _bspRequiredStake; // how much a validator should have staked in order to run an operator\n    uint64 private _blockSpecimenSessionDuration; // the length of a session in blocks\n    uint64 private _minSubmissionsRequired; // min number of participants who submitted the agreed specimen hash in order for the quorum to be achieved\n\n    EnumerableSetUpgradeable.Bytes32Set private _roleNames; // set of all role names\n\n    EnumerableSetUpgradeable.AddressSet private _blockSpecimenProducers; // currently enabled block specimen producer operators\n    EnumerableSetUpgradeable.AddressSet private _governors; // governor operators\n    EnumerableSetUpgradeable.AddressSet private _auditors; // auditor operators\n\n    mapping(address => uint128) public validatorIDs; // maps an operator address to validatorId\n    mapping(uint128 => EnumerableSetUpgradeable.AddressSet) private _validatorOperators; // operator addresses that validator owns\n    mapping(address => bytes32) public operatorRoles; // operator address => role\n    mapping(uint128 => uint128) private _validatorActiveOperatorsCounters; // how many operators are enabled per validator given validator id\n    mapping(uint64 => mapping(uint64 => BlockSpecimenSession)) private _sessions; // chainId => blockHeight\n    mapping(uint64 => ChainData) private _chainData; // by chain id\n\n    mapping(bytes32 => string[]) private _urls; // hash => urls\n\n    struct ChainData {\n        uint256 blockOnTargetChain; // block number on the chain for which BSP are produced which is mapped to the current chain block\n        uint256 blockOnCurrentChain; // block number on the chain where the ProofChain is deployed. it is mapped to the target chain block\n        uint256 secondsPerBlock; // average block time on the chain for which BSP is generated\n        uint128 allowedThreshold; // block offsett threshold, used to handle minor de-synchronization over time\n        uint128 maxSubmissionsPerBlockHeight; // max number of block hashes allowed to submit per block height\n        uint64 nthBlock; // block divisor\n    }\n\n    struct BlockHash {\n        mapping(bytes32 => address[]) participants; // specimen hash => operators who submitted the specimen hash\n        bytes32[] specimenHashes; // raw specimen hashes\n    }\n\n    struct SessionParticipantData {\n        uint128 stake; // stake at the time when an operator submitted the first specimen hash\n        uint128 submissionCounter; // how many specimen hashes an operator has submitted\n    }\n\n    struct BlockSpecimenSession {\n        mapping(bytes32 => BlockHash) blockHashes;\n        bytes32[] blockHashesRaw;\n        mapping(address => SessionParticipantData) participantsData; // stake and submission counter, pack these together to save gas\n        uint64 sessionDeadline; // the last block when an operator can submit a specimen hash\n        bool requiresAudit; // auditor can arbitrate the session only if this is set to true\n    }\n\n    event OperatorAdded(address operator, uint128 validatorId, bytes32 role);\n\n    event OperatorRemoved(address operator);\n\n    event OperatorEnabled(address operator);\n\n    event OperatorDisabled(address operator);\n\n    event BlockSpecimenProductionProofSubmitted(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash, // SHA-256 content-hash of specimen object file;\n        string storageURL, // URL of specimen storage\n        uint128 submittedStake\n    );\n\n    event SessionStarted(uint64 indexed chainId, uint64 indexed blockHeight, uint64 deadline);\n\n    event BlockSpecimenRewardAwarded(uint64 indexed chainId, uint64 indexed blockHeight, bytes32 indexed blockhash, bytes32 specimenhash);\n\n    event QuorumNotReached(uint64 indexed chainId, uint64 blockHeight);\n\n    event BlockSpecimenRewardChanged(uint128 newBlockSpecimenRewardAllocation);\n\n    event MinimumRequiredStakeChanged(uint128 newStakeRequirement);\n\n    event StakingInterfaceChanged(address newInterfaceAddress);\n\n    event SpecimenSessionQuorumChanged(uint256 newQuorumThreshold);\n\n    event SpecimenSessionDurationChanged(uint64 newSessionDuration);\n\n    event SpecimenSessionMinSubmissionChanged(uint64 minSubmissions);\n\n    event NthBlockChanged(uint64 indexed chainId, uint64 indexed nthBlock);\n\n    event MaxSubmissionsPerBlockHeightChanged(uint256 maxSubmissions);\n\n    event ChainSyncDataChanged(uint64 indexed chainId, uint256 blockOnTargetChain, uint256 blockOnCurrentChain, uint256 secondsPerBlock);\n\n    event SecondsPerBlockChanged(uint64 indexed secondsPerBlock);\n\n    event BlockHeightSubmissionThresholdChanged(uint64 indexed chainId, uint64 threshold);\n\n    modifier onlyGovernor() {\n        require(_governors.contains(msg.sender), \"Sender is not GOVERNANCE_ROLE\");\n        _;\n    }\n\n    /**\n     * Operators will have multiple addresses: the address they submit the proofs from and the address that manages staking and operator instances\n     */\n    modifier onlyOperatorManager(address operator) {\n        (address validatorAddress, , , ) = _stakingInterface.getValidatorMetadata(validatorIDs[operator]);\n        require(validatorAddress == msg.sender, \"Sender is not operator manager\");\n        _;\n    }\n\n    function initialize(address initialOwner, address stakingContract) public initializer {\n        __Ownable_init();\n\n        _governors.add(msg.sender);\n\n        _roleNames.add(GOVERNANCE_ROLE);\n        _roleNames.add(BLOCK_SPECIMEN_PRODUCER_ROLE);\n        _roleNames.add(AUDITOR_ROLE);\n\n        setQuorumThreshold(_DIVIDER / 2); // 50%\n        setBlockSpecimenReward(10**14); // 0.0001\n        setBlockSpecimenSessionDuration(240); // blocks\n        setMinSubmissionsRequired(2);\n        setStakingInterface(stakingContract);\n        _governors.remove(msg.sender);\n\n        operatorRoles[initialOwner] = GOVERNANCE_ROLE;\n        _governors.add(initialOwner);\n        emit OperatorAdded(initialOwner, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Adds operator on the staking contract\n     */\n    function addValidator(address validator, uint128 commissionRate) external onlyGovernor {\n        _stakingInterface.addValidator(validator, commissionRate);\n    }\n\n    /**\n     * Disables the given operator on the staking contract\n     */\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external onlyGovernor {\n        _stakingInterface.disableValidator(validatorId, blockNumber);\n    }\n\n    /**\n     * Disables the operator instance.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function _removeBSPOperatorFromActiveInstances(address operator) internal {\n        _blockSpecimenProducers.remove(operator);\n        uint128 validatorId = validatorIDs[operator];\n        _validatorActiveOperatorsCounters[validatorId]--;\n        // if there are not more enabled operators left we need to disable the validator instance too\n        if (_validatorActiveOperatorsCounters[validatorId] == 0) _stakingInterface.disableValidator(validatorId, block.number);\n    }\n\n    /**\n     * Enables the operator instance. The operators need to call that function before they can start submitting proofs\n     */\n    function enableBSPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        require(!_blockSpecimenProducers.contains(operator), \"Operator is already enabled\");\n        uint128 validatorId = validatorIDs[operator];\n        _blockSpecimenProducers.add(operator);\n        _validatorActiveOperatorsCounters[validatorId]++;\n        // if no operator was enabled we need to enable the validator instance\n        if (_validatorActiveOperatorsCounters[validatorId] == 1) _stakingInterface.enableValidator(validatorId);\n        emit OperatorEnabled(operator);\n    }\n\n    /**\n     * Disables the operator instance. The operator cannot submit proofs its instance got disabled.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function disableBSPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        require(_blockSpecimenProducers.contains(operator), \"Operator is already disabled\");\n        _removeBSPOperatorFromActiveInstances(operator);\n        emit OperatorDisabled(operator);\n    }\n\n    /**\n     * Adds the given address to the block specimen producers set\n     */\n    function addBSPOperator(address operator, uint128 validatorId) external onlyGovernor {\n        require(operatorRoles[operator] == 0, \"Operator already exists\");\n        operatorRoles[operator] = BLOCK_SPECIMEN_PRODUCER_ROLE;\n        validatorIDs[operator] = validatorId;\n        _validatorOperators[validatorId].add(operator);\n        emit OperatorAdded(operator, validatorId, BLOCK_SPECIMEN_PRODUCER_ROLE);\n    }\n\n    /**\n     * Removes the given address from the block specimen producers set\n     */\n    function removeBSPOperator(address operator) external onlyGovernor {\n        require(operatorRoles[operator] == BLOCK_SPECIMEN_PRODUCER_ROLE, \"Operator is not BSP\");\n        if (_blockSpecimenProducers.contains(operator)) _removeBSPOperatorFromActiveInstances(operator);\n        _validatorOperators[validatorIDs[operator]].remove(operator);\n        validatorIDs[operator] = 0;\n        operatorRoles[operator] = 0;\n        emit OperatorRemoved(operator);\n    }\n\n    /**\n     * Adds the given address to the auditors set\n     */\n    function addAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == 0, \"Operator already exists\");\n        operatorRoles[auditor] = AUDITOR_ROLE;\n        _auditors.add(auditor);\n        emit OperatorAdded(auditor, 0, AUDITOR_ROLE);\n    }\n\n    /**\n     * Removes the given address from the auditors set\n     */\n    function removeAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == AUDITOR_ROLE, \"Operator is not auditor\");\n        operatorRoles[auditor] = 0;\n        _auditors.remove(auditor);\n        emit OperatorRemoved(auditor);\n    }\n\n    /**\n     * Adds the given address to the governors set\n     */\n    function addGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == 0, \"Operator already exists\");\n        operatorRoles[governor] = GOVERNANCE_ROLE;\n        _governors.add(governor);\n        emit OperatorAdded(governor, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Removes the given address from the governors set\n     */\n    function removeGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == GOVERNANCE_ROLE, \"Operator is not governor\");\n        operatorRoles[governor] = 0;\n        _governors.remove(governor);\n        emit OperatorRemoved(governor);\n    }\n\n    /**\n     * Updates the amount of tokens required to stake in order to be able to submit the proofs\n     */\n    function setBSPRequiredStake(uint128 newStakeAmount) public onlyGovernor {\n        _bspRequiredStake = newStakeAmount;\n        emit MinimumRequiredStakeChanged(newStakeAmount);\n    }\n\n    /**\n     * Updates the address of the staking contract\n     */\n    function setStakingInterface(address stakingContractAddress) public onlyGovernor {\n        _stakingInterface = IOperationalStaking(stakingContractAddress);\n        emit StakingInterfaceChanged(stakingContractAddress);\n    }\n\n    /**\n     * Update the Block Specimen Quorum Threshold.\n     */\n    function setQuorumThreshold(uint256 quorum) public onlyGovernor {\n        _blockSpecimenQuorum = quorum;\n        emit SpecimenSessionQuorumChanged(quorum);\n    }\n\n    /**\n     * Update block divisor\n     */\n    function setNthBlock(uint64 chainId, uint64 n) public onlyGovernor {\n        _chainData[chainId].nthBlock = n;\n        emit NthBlockChanged(chainId, n);\n    }\n\n    /**\n     * Update the reward allocation per block specimen.\n     */\n    function setBlockSpecimenReward(uint128 newBlockSpecimenReward) public onlyGovernor {\n        _blockSpecimenRewardAllocation = newBlockSpecimenReward;\n        emit BlockSpecimenRewardChanged(newBlockSpecimenReward);\n    }\n\n    /**\n     * Update the duration of a specimen session in blocks\n     */\n    function setBlockSpecimenSessionDuration(uint64 newSessionDuration) public onlyGovernor {\n        _blockSpecimenSessionDuration = newSessionDuration;\n        emit SpecimenSessionDurationChanged(newSessionDuration);\n    }\n\n    /**\n     * Update the minimum # of submissions required in order to reach quorum\n     */\n    function setMinSubmissionsRequired(uint64 minSubmissions) public onlyGovernor {\n        _minSubmissionsRequired = minSubmissions;\n        emit SpecimenSessionMinSubmissionChanged(minSubmissions);\n    }\n\n    /**\n     * Update the max # of submissions per operator per block height\n     */\n    function setMaxSubmissionsPerBlockHeight(uint64 chainId, uint64 maxSubmissions) public onlyGovernor {\n        _chainData[chainId].maxSubmissionsPerBlockHeight = maxSubmissions;\n        emit MaxSubmissionsPerBlockHeightChanged(maxSubmissions);\n    }\n\n    /**\n     * Update chain sync data\n     */\n    function setChainSyncData(\n        uint64 chainId,\n        uint256 blockOnTargetChain,\n        uint256 blockOnCurrentChain,\n        uint256 secondsPerBlock\n    ) external onlyGovernor {\n        ChainData storage cd = _chainData[chainId];\n        require(secondsPerBlock > 0, \"Seconds per block cannot be 0\");\n        cd.blockOnTargetChain = blockOnTargetChain;\n        cd.blockOnCurrentChain = blockOnCurrentChain;\n        cd.secondsPerBlock = secondsPerBlock;\n        emit ChainSyncDataChanged(chainId, blockOnTargetChain, blockOnCurrentChain, secondsPerBlock);\n    }\n\n    /**\n     * Update block height submission threshold for live sync\n     */\n    function setBlockHeightSubmissionsThreshold(uint64 chainId, uint64 threshold) external onlyGovernor {\n        _chainData[chainId].allowedThreshold = threshold;\n        emit BlockHeightSubmissionThresholdChanged(chainId, threshold);\n    }\n\n    /**\n     * Update seconds per block on the chain where the ProofChain is deployed\n     */\n    function setSecondsPerBlock(uint64 secondsPerBlock) external onlyGovernor {\n        _secondsPerBlock = secondsPerBlock;\n        emit SecondsPerBlockChanged(secondsPerBlock);\n    }\n\n    /**\n     * Block Specimen Producers submit their block specimen proofs using this function.\n     */\n    function submitBlockSpecimenProof(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash,\n        string calldata storageURL\n    ) external {\n        require(_blockSpecimenProducers.contains(msg.sender), \"Sender is not BLOCK_SPECIMEN_PRODUCER_ROLE\");\n        ChainData storage cd = _chainData[chainId];\n        require(cd.nthBlock != 0, \"Invalid chain ID\");\n        require(blockHeight % cd.nthBlock == 0, \"Invalid block height\");\n\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[msg.sender];\n\n        // if this is the first specimen to be submitted for a block, initialize a new session\n        if (sessionDeadline == 0) {\n            require(!session.requiresAudit, \"Session submissions have closed\");\n\n            uint256 currentBlockOnTargetChain = cd.blockOnTargetChain + (((block.number - cd.blockOnCurrentChain) * _secondsPerBlock) / cd.secondsPerBlock);\n            uint256 lowerBound = currentBlockOnTargetChain >= cd.allowedThreshold ? currentBlockOnTargetChain - cd.allowedThreshold : 0;\n            require(lowerBound <= blockHeight && blockHeight <= currentBlockOnTargetChain + cd.allowedThreshold, \"Block height is out of bounds for live sync\");\n\n            session.sessionDeadline = uint64(block.number + _blockSpecimenSessionDuration);\n            (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n            require(baseStake >= _bspRequiredStake, \"Insufficiently staked to submit\");\n            participantsData.stake = baseStake + delegateStakes;\n\n            session.blockHashesRaw.push(blockHash);\n            BlockHash storage bh = session.blockHashes[blockHash];\n            bh.specimenHashes.push(specimenHash);\n\n            bh.participants[specimenHash].push(msg.sender);\n            participantsData.submissionCounter++;\n            emit SessionStarted(chainId, blockHeight, session.sessionDeadline);\n        } else {\n            require(block.number <= sessionDeadline, \"Session submissions have closed\");\n            require(participantsData.submissionCounter < cd.maxSubmissionsPerBlockHeight, \"Max submissions limit exceeded\");\n\n            BlockHash storage bh = session.blockHashes[blockHash];\n            bytes32[] storage specimenHashes = bh.specimenHashes;\n            if (participantsData.stake != 0) {\n                // check if it was submitted for the same block hash\n                // this should be at most 10 iterations\n                for (uint256 j = 0; j < specimenHashes.length; j++) {\n                    address[] storage specimenHashParticipants = bh.participants[specimenHashes[j]];\n                    for (uint256 k = 0; k < specimenHashParticipants.length; k++)\n                        require(specimenHashParticipants[k] != msg.sender, \"Operator already submitted for the provided block hash\");\n                }\n            } else {\n                (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n                require(baseStake >= _bspRequiredStake, \"Insufficiently staked to submit\");\n                participantsData.stake = baseStake + delegateStakes;\n            }\n\n            address[] storage participants = bh.participants[specimenHash];\n            if (specimenHashes.length != 0) {\n                if (participants.length == 0) specimenHashes.push(specimenHash);\n            } else {\n                session.blockHashesRaw.push(blockHash);\n                specimenHashes.push(specimenHash);\n            }\n\n            participants.push(msg.sender);\n            participantsData.submissionCounter++;\n        }\n        _urls[specimenHash].push(storageURL);\n\n        emit BlockSpecimenProductionProofSubmitted(chainId, blockHeight, blockHash, specimenHash, storageURL, participantsData.stake);\n    }\n\n    /**\n     * This function is called when a quorum of equivalent hashes have been submitted for a Block Specimen Session.\n     */\n    function finalizeAndRewardSpecimenSession(uint64 chainId, uint64 blockHeight) public {\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        require(block.number > sessionDeadline, \"Session not past deadline\");\n        require(!session.requiresAudit, \"Session cannot be finalized\");\n        require(sessionDeadline != 0, \"Session not started\");\n\n        uint256 contributorsN;\n        bytes32 specimenHash;\n\n        uint256 max;\n        bytes32 agreedBlockHash;\n        bytes32 agreedSpecimenHash;\n\n        bytes32[] storage blockHashesRaw = session.blockHashesRaw;\n        bytes32 rawBlockHash;\n\n        // find the block hash and specimen hashes that the quorum agrees on by finding the specimen hash with the highest number of participants\n        for (uint256 i = 0; i < blockHashesRaw.length; i++) {\n            rawBlockHash = blockHashesRaw[i];\n            BlockHash storage bh = session.blockHashes[rawBlockHash];\n            for (uint256 j = 0; j < bh.specimenHashes.length; j++) {\n                specimenHash = bh.specimenHashes[j];\n                uint256 len = bh.participants[specimenHash].length;\n                contributorsN += len;\n                if (len > max) {\n                    max = len;\n                    agreedBlockHash = rawBlockHash;\n                    agreedSpecimenHash = specimenHash;\n                }\n            }\n        }\n        // check if the number of submissions is sufficient and if the quorum is achieved\n        if (_minSubmissionsRequired <= max && (max * _DIVIDER) / contributorsN > _blockSpecimenQuorum)\n            _rewardParticipants(session, chainId, blockHeight, agreedBlockHash, agreedSpecimenHash);\n        else emit QuorumNotReached(chainId, blockHeight);\n\n        session.requiresAudit = true;\n        // set session deadline to 0 to release gas\n        session.sessionDeadline = 0;\n    }\n\n    /**\n     * Called by Auditor role when a quorum is not reached. The auditor's submitted hash is\n     * the definitive truth.\n     */\n    function arbitrateBlockSpecimenSession(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 definitiveSpecimenHash\n    ) public {\n        require(_auditors.contains(msg.sender), \"Sender is not AUDITOR_ROLE\");\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        require(session.requiresAudit, \"Session must be finalized before audit\");\n        _rewardParticipants(session, chainId, blockHeight, blockHash, definitiveSpecimenHash);\n    }\n\n    function _rewardParticipants(\n        BlockSpecimenSession storage session,\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockHash,\n        bytes32 specimenHash\n    ) internal {\n        address participant;\n        address[] storage participants = session.blockHashes[blockHash].participants[specimenHash];\n        uint256 len = participants.length;\n        uint128[] memory ids = new uint128[](len);\n        uint128[] memory rewards = new uint128[](len);\n        uint128 totalStake;\n        mapping(address => SessionParticipantData) storage participantsData = session.participantsData;\n        for (uint256 i = 0; i < len; i++) {\n            totalStake += participantsData[participants[i]].stake;\n        }\n        for (uint256 i = 0; i < len; i++) {\n            participant = participants[i];\n            SessionParticipantData storage pd = participantsData[participant];\n            ids[i] = validatorIDs[participant];\n            rewards[i] = uint128((uint256(pd.stake) * uint256(_blockSpecimenRewardAllocation)) / totalStake);\n            // release gas if possible\n            if (pd.submissionCounter == 1) {\n                pd.submissionCounter = 0;\n                pd.stake = 0;\n            }\n        }\n        _stakingInterface.rewardValidators(ids, rewards);\n        emit BlockSpecimenRewardAwarded(chainId, blockHeight, blockHash, specimenHash);\n\n        delete session.blockHashes[blockHash]; // release gas\n    }\n\n    /**\n     * Returns contract meta data\n     */\n    function getMetadata()\n        public\n        view\n        returns (\n            address stakingInterface,\n            uint128 blockSpecimenRewardAllocation,\n            uint64 blockSpecimenSessionDuration,\n            uint64 minSubmissionsRequired,\n            uint256 blockSpecimenQuorum,\n            uint256 secondsPerBlock\n        )\n    {\n        return (address(_stakingInterface), _blockSpecimenRewardAllocation, _blockSpecimenSessionDuration, _minSubmissionsRequired, _blockSpecimenQuorum, _secondsPerBlock);\n    }\n\n    /**\n     * Returns data used for chain sync\n     */\n    function getChainData(uint64 chainId)\n        external\n        view\n        returns (\n            uint256 blockOnTargetChain,\n            uint256 blockOnCurrentChain,\n            uint256 secondsPerBlock,\n            uint128 allowedThreshold,\n            uint128 maxSubmissionsPerBlockHeight,\n            uint64 nthBlock\n        )\n    {\n        ChainData memory cd = _chainData[chainId];\n        return (cd.blockOnTargetChain, cd.blockOnCurrentChain, cd.secondsPerBlock, cd.allowedThreshold, cd.maxSubmissionsPerBlockHeight, cd.nthBlock);\n    }\n\n    /**\n     * Returns all bsp operator addresses (disabled and enabled) of a given validator\n     */\n    function getOperators(uint128 validatorId) external view returns (address[] memory) {\n        return _validatorOperators[validatorId].values();\n    }\n\n    /**\n     * Returns all enabled operators by role type\n     */\n    function getAllOperators()\n        external\n        view\n        returns (\n            address[] memory _bsps,\n            address[] memory __governors,\n            address[] memory __auditors\n        )\n    {\n        return (_blockSpecimenProducers.values(), _governors.values(), _auditors.values());\n    }\n\n    /**\n     * Returns required stake and enabled block specimen producer operators\n     */\n    function getBSPRoleData() external view returns (uint128 requiredStake, address[] memory activeMembers) {\n        return (_bspRequiredStake, _blockSpecimenProducers.values());\n    }\n\n    /**\n     * Returns true if the given operator is enabled.\n     * Returns false if the operator is disabled or does not exist\n     */\n    function isEnabled(address operator) external view returns (bool) {\n        return _blockSpecimenProducers.contains(operator);\n    }\n\n    /**\n     * Returns IPFS urls where specimens reside\n     */\n    function getURLS(bytes32 specimenhash) external view returns (string[] memory) {\n        return _urls[specimenhash];\n    }\n\n    /**\n     * This function is called to check whether the sesion is open for the given chain id and block height\n     */\n    function isSessionOpen(\n        uint64 chainId,\n        uint64 blockHeight,\n        address operator\n    ) public view returns (bool) {\n        BlockSpecimenSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[operator];\n        bool submissionLimitExceeded = participantsData.submissionCounter == _chainData[chainId].maxSubmissionsPerBlockHeight;\n        return (!submissionLimitExceeded && block.number <= sessionDeadline) || (sessionDeadline == 0 && !session.requiresAudit);\n    }\n}\n"
        },
        "./contracts/MigrationOperationalStaking.sol": {
            "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\ncontract MigrationOperationalStaking is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint256 public constant DIVIDER = 10**18; // 18 decimals used for scaling rates\n    uint128 public constant REWARD_REDEEM_THRESHOLD = 10**8; // minimum number of tokens that can be redeemed\n\n    IERC20Upgradeable public CQT;\n    uint128 public rewardPool; // how many tokens are allocated for rewards\n    uint128 public validatorCoolDown; // how many blocks until validator unstaking is unlocked\n    uint128 public delegatorCoolDown; // how many blocks until delegator unstaking is unlocked\n    uint128 public maxCapMultiplier; // *see readme\n    uint128 public validatorMaxStake; // how many tokens validators can stake at most\n    address public stakingManager;\n    uint128 public validatorsN; // number of validators, used to get validator ids\n    mapping(uint128 => Validator) internal _validators; // id -> validator instance\n\n    struct Staking {\n        uint128 shares; // # of validator shares that the delegator owns\n        uint128 staked; // # of CQT that a delegator delegated originally through stake() transaction\n    }\n\n    struct Unstaking {\n        uint128 coolDownEnd; // epoch when unstaking can be redeemed\n        uint128 amount; // # of unstaked CQT\n    }\n\n    struct Validator {\n        uint128 commissionAvailableToRedeem;\n        uint128 exchangeRate; // validator exchange rate\n        address _address; // wallet address of the operator which is mapped to the validator instance\n        uint128 delegated; // track amount of tokens delegated\n        uint128 totalShares; // total number of validator shares\n        uint128 commissionRate;\n        uint256 disabledAtBlock;\n        mapping(address => Staking) stakings;\n        mapping(address => Unstaking[]) unstakings;\n    }\n\n    event Initialized(address cqt, uint128 validatorCoolDown, uint128 delegatorCoolDown, uint128 maxCapMultiplier, uint128 validatorMaxStake);\n\n    event RewardTokensDeposited(uint128 amount);\n\n    event ValidatorAdded(uint128 indexed id, uint128 commissionRate, address indexed validator);\n\n    event Staked(uint128 indexed validatorId, address delegator, uint128 amount);\n\n    event Unstaked(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakeId);\n\n    event RecoveredUnstake(uint128 indexed validatorId, address indexed delegator, uint128 amount, uint128 unstakingId);\n\n    event UnstakeRedeemed(uint128 indexed validatorId, address indexed delegator, uint128 indexed unstakeId, uint128 amount);\n\n    event AllocatedTokensTaken(uint128 amount);\n\n    event RewardFailedDueLowPool(uint128 indexed validatorId, uint128 amount);\n\n    event RewardFailedDueZeroStake(uint128 indexed validatorId, uint128 amount);\n\n    event RewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);\n\n    event CommissionRewardRedeemed(uint128 indexed validatorId, address indexed beneficiary, uint128 amount);\n\n    event StakingManagerAddressChanged(address indexed operationalManager);\n\n    event ValidatorCommissionRateChanged(uint128 indexed validatorId, uint128 amount);\n\n    event ValidatorMaxCapChanged(uint128 amount);\n\n    event ValidatorDisabled(uint128 indexed validatorId, uint256 blockNumber);\n\n    event Redelegated(uint128 indexed oldValidatorId, uint128 indexed newValidatorId, address indexed delegator, uint128 amount, uint128 unstakingId);\n\n    event MaxCapMultiplierChanged(uint128 newMaxCapMultiplier);\n\n    event ValidatorEnabled(uint128 indexed validatorId);\n\n    event ValidatorAddressChanged(uint128 indexed validatorId, address indexed newAddress);\n\n    event DelegatorBurnt(uint128 indexed validatorId, address indexed delegator);\n\n    event MadCQTBurnt(uint128 indexed amount);\n\n    event CQTAddressChanged(address indexed cqt);\n\n    event MadCQTWithdrawn(address indexed cqt, uint256 indexed amount);\n\n    modifier validValidatorId(uint128 validatorId) {\n        require(validatorId < validatorsN, \"Invalid validator\");\n        _;\n    }\n\n    /*\n     * Used to convert validator shares to CQT\n     */\n    function _sharesToTokens(uint128 sharesN, uint128 rate) internal pure returns (uint128) {\n        return uint128((uint256(sharesN) * uint256(rate)) / DIVIDER);\n    }\n\n    /*\n     * Burn stakes, rewards and unstakes of a predefined list of delegators\n     */\n    function burnDefaultDelegators() external onlyOwner {\n        address[6] memory defaultToBurn = [\n            0xe7CCfcc5815131B129c82322B4bA9E10B0159291,\n            0x122F83aE6B1677082F2541686b74Ca55Ebb1B58b,\n            0xdB6ee35DdbA6AB1F39d4a1369104A543e5De0E11,\n            0x128E6bBAa2d269A7D26a3E3AF13Ea86943A05C24,\n            0xa312F7156A2F4290D53e5694afE44e9cC7f1B811,\n            0x1DB596c09f5B37013B3cc263B9903D2474050F3f\n        ];\n\n        uint256 burnLength = defaultToBurn.length;\n\n        for (uint128 i = 0; i < burnLength; i++) {\n            for (uint128 validatorId = 0; validatorId < validatorsN; validatorId++) {\n                _burnDelegatorBalance(validatorId, defaultToBurn[i]);\n            }\n        }\n    }\n\n    /*\n     * Burn delegator's stakes, rewards and unstakes under the given validator\n     */\n    function burnDelegatorBalance(uint128 validatorId, address delegator) external onlyOwner {\n        return _burnDelegatorBalance(validatorId, delegator);\n    }\n\n    /*\n     * Burn delegator's stakes, rewards and unstakes under the given validator\n     */\n    function _burnDelegatorBalance(uint128 validatorId, address delegator) internal validValidatorId(validatorId) {\n        Validator storage v = _validators[validatorId];\n        Staking storage s = v.stakings[delegator];\n\n        // do not allow to burn self staked tokens,\n        // put it inside if statements since one of the addresses has self staked tokens\n        // but we want to only burn the delegated\n        if (delegator == v._address) return;\n\n        uint128 totalValueBurnt = _sharesToTokens(s.shares, v.exchangeRate);\n\n        v.totalShares -= s.shares;\n        v.delegated -= s.staked;\n        s.shares = 0;\n        s.staked = 0;\n\n        // the delegator stakings that we are planning to burn do not have any unstakings\n        // but we included implementation here just in case\n        // we need to keep track of how much is burnt in total\n        Unstaking[] memory unstakings = v.unstakings[delegator];\n        uint256 unstakingsN = unstakings.length;\n        for (uint128 i = 0; i < unstakingsN; i++) {\n            totalValueBurnt += unstakings[i].amount;\n        }\n        delete v.unstakings[delegator];\n        emit DelegatorBurnt(validatorId, delegator);\n        emit MadCQTBurnt(totalValueBurnt);\n    }\n\n    /*\n     * Withdraw all the CQT from the contract to the given wallet\n     */\n    function withdrawAllMadCQT(address recoveryWallet) external onlyOwner {\n        require(recoveryWallet != address(0), \"Invalid recovery wallet address\");\n        uint256 balance = CQT.balanceOf(address(this));\n        emit MadCQTWithdrawn(address(CQT), balance);\n        CQT.safeTransfer(recoveryWallet, balance);\n    }\n\n    /*\n     * Set CQT token address\n     */\n    function setCQTAddress(address newCQT) external onlyOwner {\n        require(newCQT != address(0), \"Invalid CQT address\");\n        require(newCQT != address(CQT), \"New CQT address cannot be equal to the old one\");\n        CQT = IERC20Upgradeable(newCQT);\n        emit CQTAddressChanged(newCQT);\n    }\n\n    /*\n     * Gets metadata\n     */\n    function getMetadata()\n        external\n        view\n        returns (\n            address CQTaddress,\n            address _stakingManager,\n            uint128 _validatorsN,\n            uint128 _rewardPool,\n            uint128 _validatorCoolDown,\n            uint128 _delegatorCoolDown,\n            uint128 _maxCapMultiplier,\n            uint128 _validatorMaxStake\n        )\n    {\n        return (address(CQT), stakingManager, validatorsN, rewardPool, validatorCoolDown, delegatorCoolDown, maxCapMultiplier, validatorMaxStake);\n    }\n\n    /*\n     * Returns validator staked and delegated token amounts, excluding compounded rewards\n     */\n    function getValidatorStakingData(uint128 validatorId) external view validValidatorId(validatorId) returns (uint128 staked, uint128 delegated) {\n        Validator storage v = _validators[validatorId];\n        return (v.stakings[v._address].staked, v.delegated);\n    }\n\n    /*\n     * Returns validator staked and delegated token amounts, including compounded rewards\n     */\n    function getValidatorCompoundedStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated) {\n        Validator storage v = _validators[validatorId];\n        // this includes staked + compounded rewards\n        staked = _sharesToTokens(v.stakings[v._address].shares, v.exchangeRate);\n        // this includes delegated + compounded rewards\n        delegated = _sharesToTokens(v.totalShares, v.exchangeRate) - staked;\n        return (staked, delegated);\n    }\n\n    /*\n     * Returns the amount that's staked, earned by delegator plus unstaking information.\n     * CommissionEarned is for validators\n     */\n    function getDelegatorMetadata(address delegator, uint128 validatorId)\n        external\n        view\n        validValidatorId(validatorId)\n        returns (\n            uint128 staked,\n            uint128 rewards,\n            uint128 commissionEarned,\n            uint128[] memory unstakingAmounts,\n            uint128[] memory unstakingsEndEpochs\n        )\n    {\n        Validator storage v = _validators[validatorId];\n        Staking storage s = v.stakings[delegator];\n        staked = s.staked;\n        uint128 sharesValue = _sharesToTokens(s.shares, v.exchangeRate);\n        if (sharesValue <= s.staked) rewards = 0;\n        else rewards = sharesValue - s.staked;\n        // if requested delegator is the requested validator\n        if (v._address == delegator) commissionEarned = v.commissionAvailableToRedeem;\n        Unstaking[] memory unstakings = v.unstakings[delegator];\n        uint256 unstakingsN = unstakings.length;\n        unstakingAmounts = new uint128[](unstakingsN);\n        unstakingsEndEpochs = new uint128[](unstakingsN);\n        for (uint256 i = 0; i < unstakingsN; i++) {\n            unstakingAmounts[i] = unstakings[i].amount;\n            unstakingsEndEpochs[i] = unstakings[i].coolDownEnd;\n        }\n        return (staked, rewards, commissionEarned, unstakingAmounts, unstakingsEndEpochs);\n    }\n\n    function renounceOwnership() public virtual override onlyOwner {}\n}\n"
        },
        "./contracts/CovalentQueryTokenFaucet.sol": {
            "content": "pragma solidity ^0.8.4;\n\n// import { ERC20 } from \"@openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// import { Ownable } from \"openzeppelin-solidity/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ERC20Permit} from \"./ERC20Permit/ERC20Permit.sol\";\n\n/**\n * @title CovalentQueryToken\n * @dev Covalent ERC20 Token\n */\ncontract CovalentQueryTokenFaucet is ERC20Permit, Ownable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 totalSupply\n    ) public ERC20(name, symbol) {\n        _mint(msg.sender, totalSupply);\n    }\n\n    /**\n     * @notice Function to rescue funds\n     * Owner is assumed to be a governance/multi-sig, Which will be used to rescue accidently sent user tokens\n     * In case of no use this funtion can be disabled by destroying ownership via `renounceOwnership` function\n     * @param token Address of token to be rescued\n     * @param destination User address\n     * @param amount Amount of tokens\n     */\n    function rescueTokens(\n        address token,\n        address destination,\n        uint256 amount\n    ) external onlyOwner {\n        require(token != destination, \"Invalid address\");\n        require(ERC20(token).transfer(destination, amount), \"Retrieve failed\");\n    }\n\n    function faucet(address recipient, uint256 amount) public {\n        _mint(recipient, amount);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "@openzeppelin/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "@openzeppelin/contracts/utils/Counters.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
        },
        "@openzeppelin/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}