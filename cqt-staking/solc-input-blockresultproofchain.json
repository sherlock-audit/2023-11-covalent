{
    "language": "Solidity",
    "sources": {
        "./contracts/BlockResultProofChain.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IOperationalStaking.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract BlockResultProofChain is OwnableUpgradeable {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\n\n    IOperationalStaking _stakingInterface; // staking contract\n\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\"GOVERNANCE_ROLE\");\n    bytes32 public constant BLOCK_RESULT_PRODUCER_ROLE = keccak256(\"BLOCK_RESULT_PRODUCER_ROLE\");\n    bytes32 public constant AUDITOR_ROLE = keccak256(\"AUDITOR_ROLE\");\n    uint256 private constant _DIVIDER = 10**18; // 18 decimals used for scaling\n\n    uint256 private _blockResultQuorum; // The value is represented as a uint <= 10**18. The threshold value will later be divided by 10**18 to represent it as a percentage.  e.g.) 10**18 == 100%; 5 * 10**17 == 50%;\n    uint256 private _secondsPerBlock; // average block time on the chain where the ProofChain is deployed\n    uint128 private _blockResultRewardAllocation; // the reward allocated per block hash\n    uint128 private _brpRequiredStake; // how much a validator should have staked in order to run an operator\n    uint64 private _blockResultSessionDuration; // the length of a session in blocks\n    uint64 private _minSubmissionsRequired; // min number of participants who submitted the agreed result hash in order for the quorum to be achieved\n\n    EnumerableSetUpgradeable.Bytes32Set private _roleNames; // set of all role names\n\n    EnumerableSetUpgradeable.AddressSet private _blockResultProducers; // currently enabled block result producer operators\n    EnumerableSetUpgradeable.AddressSet private _governors; // governor operators\n    EnumerableSetUpgradeable.AddressSet private _auditors; // auditor operators\n\n    mapping(address => uint128) public validatorIDs; // maps an operator address to validatorId\n    mapping(uint128 => EnumerableSetUpgradeable.AddressSet) private _validatorOperators; // operator addresses that validator owns\n    mapping(address => bytes32) public operatorRoles; // operator address => role\n    mapping(uint128 => uint128) private _validatorActiveOperatorsCounters; // how many operators are enabled per validator given validator id\n    mapping(uint64 => mapping(uint64 => BlockResultSession)) private _sessions; // chainId => blockHeight\n    mapping(uint64 => ChainData) private _chainData; // by chain id\n\n    mapping(bytes32 => string[]) private _urls; // hash => urls\n\n    struct ChainData {\n        uint256 blockOnTargetChain; // block number on the chain for which BRP are produced which is mapped to the current chain block\n        uint256 blockOnCurrentChain; // block number on the chain where the ProofChain is deployed. it is mapped to the target chain block\n        uint256 secondsPerBlock; // average block time on the chain for which BRP is generated\n        uint128 allowedThreshold; // block offsett threshold, used to handle minor de-synchronization over time\n        uint128 maxSubmissionsPerBlockHeight; // max number of block hashes allowed to submit per block height\n        uint64 nthBlock; // block divisor\n    }\n\n    struct BlockSpecimenHash {\n        mapping(bytes32 => address[]) participants; // result hash => operators who submitted the result hash\n        bytes32[] resultHashes; // raw result hashes\n    }\n\n    struct SessionParticipantData {\n        uint128 stake; // stake at the time when an operator submitted the first result hash\n        uint128 submissionCounter; // how many result hashes an operator has submitted\n    }\n\n    struct BlockResultSession {\n        mapping(bytes32 => BlockSpecimenHash) blockSpecimenHashes;\n        bytes32[] blockSpecimenHashesRaw;\n        mapping(address => SessionParticipantData) participantsData; // stake and submission counter, pack these together to save gas\n        uint64 sessionDeadline; // the last block when an operator can submit a result hash\n        bool requiresAudit; // auditor can arbitrate the session only if this is set to true\n    }\n\n    event OperatorAdded(address operator, uint128 validatorId, bytes32 role);\n\n    event OperatorRemoved(address operator);\n\n    event OperatorEnabled(address operator);\n\n    event OperatorDisabled(address operator);\n\n    event BlockResultProductionProofSubmitted(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash, // SHA-256 content-hash of result object file;\n        string storageURL, // URL of result storage\n        uint128 submittedStake\n    );\n\n    event SessionStarted(uint64 indexed chainId, uint64 indexed blockHeight, uint64 deadline);\n\n    event BlockResultRewardAwarded(uint64 indexed chainId, uint64 indexed blockHeight, bytes32 indexed blockSpecimenHash, bytes32 resulthash);\n\n    event QuorumNotReached(uint64 indexed chainId, uint64 blockHeight);\n\n    event BlockResultRewardChanged(uint128 newBlockResultRewardAllocation);\n\n    event MinimumRequiredStakeChanged(uint128 newStakeRequirement);\n\n    event StakingInterfaceChanged(address newInterfaceAddress);\n\n    event ResultSessionQuorumChanged(uint256 newQuorumThreshold);\n\n    event ResultSessionDurationChanged(uint64 newSessionDuration);\n\n    event ResultSessionMinSubmissionChanged(uint64 minSubmissions);\n\n    event NthBlockChanged(uint64 indexed chainId, uint64 indexed nthBlock);\n\n    event MaxSubmissionsPerBlockHeightChanged(uint256 maxSubmissions);\n\n    event ChainSyncDataChanged(uint64 indexed chainId, uint256 blockOnTargetChain, uint256 blockOnCurrentChain, uint256 secondsPerBlock);\n\n    event SecondsPerBlockChanged(uint64 indexed secondsPerBlock);\n\n    event BlockHeightSubmissionThresholdChanged(uint64 indexed chainId, uint64 threshold);\n\n    modifier onlyGovernor() {\n        require(_governors.contains(msg.sender), \"Sender is not GOVERNANCE_ROLE\");\n        _;\n    }\n\n    /**\n     * Operators will have multiple addresses: the address they submit the proofs from and the address that manages staking and operator instances\n     */\n    modifier onlyOperatorManager(address operator) {\n        (address validatorAddress, , , ) = _stakingInterface.getValidatorMetadata(validatorIDs[operator]);\n        require(validatorAddress == msg.sender, \"Sender is not operator manager\");\n        _;\n    }\n\n    function initialize(address initialOwner, address stakingContract) public initializer {\n        __Ownable_init();\n\n        _governors.add(msg.sender);\n\n        _roleNames.add(GOVERNANCE_ROLE);\n        _roleNames.add(BLOCK_RESULT_PRODUCER_ROLE);\n        _roleNames.add(AUDITOR_ROLE);\n\n        setQuorumThreshold(_DIVIDER / 2); // 50%\n        setBlockResultReward(10**14); // 0.0001\n        setBlockResultSessionDuration(240); // blocks\n        setMinSubmissionsRequired(2);\n        setStakingInterface(stakingContract);\n        _governors.remove(msg.sender);\n\n        operatorRoles[initialOwner] = GOVERNANCE_ROLE;\n        _governors.add(initialOwner);\n        emit OperatorAdded(initialOwner, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Adds operator on the staking contract\n     */\n    function addValidator(address validator, uint128 commissionRate) external onlyGovernor {\n        _stakingInterface.addValidator(validator, commissionRate);\n    }\n\n    /**\n     * Disables the given operator on the staking contract\n     */\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external onlyGovernor {\n        _stakingInterface.disableValidator(validatorId, blockNumber);\n    }\n\n    /**\n     * Disables the operator instance.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function _removeBRPOperatorFromActiveInstances(address operator) internal {\n        _blockResultProducers.remove(operator);\n        uint128 validatorId = validatorIDs[operator];\n        _validatorActiveOperatorsCounters[validatorId]--;\n        // if there are not more enabled operators left we need to disable the validator instance too\n        if (_validatorActiveOperatorsCounters[validatorId] == 0) _stakingInterface.disableValidator(validatorId, block.number);\n    }\n\n    /**\n     * Enables the operator instance. The operators need to call that function before they can start submitting proofs\n     */\n    function enableBRPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        require(!_blockResultProducers.contains(operator), \"Operator is already enabled\");\n        uint128 validatorId = validatorIDs[operator];\n        _blockResultProducers.add(operator);\n        _validatorActiveOperatorsCounters[validatorId]++;\n        // if no operator was enabled we need to enable the validator instance\n        if (_validatorActiveOperatorsCounters[validatorId] == 1) _stakingInterface.enableValidator(validatorId);\n        emit OperatorEnabled(operator);\n    }\n\n    /**\n     * Disables the operator instance. The operator cannot submit proofs its instance got disabled.\n     * If all addresses of the operator are disabled, then the operator (validator) instance will get disabled on the staking contract\n     */\n    function disableBRPOperator(address operator) external onlyOperatorManager(operator) {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        require(_blockResultProducers.contains(operator), \"Operator is already disabled\");\n        _removeBRPOperatorFromActiveInstances(operator);\n        emit OperatorDisabled(operator);\n    }\n\n    /**\n     * Adds the given address to the block result producers set\n     */\n    function addBRPOperator(address operator, uint128 validatorId) external onlyGovernor {\n        require(operatorRoles[operator] == 0, \"Operator already exists\");\n        operatorRoles[operator] = BLOCK_RESULT_PRODUCER_ROLE;\n        validatorIDs[operator] = validatorId;\n        _validatorOperators[validatorId].add(operator);\n        emit OperatorAdded(operator, validatorId, BLOCK_RESULT_PRODUCER_ROLE);\n    }\n\n    /**\n     * Removes the given address from the block result producers set\n     */\n    function removeBRPOperator(address operator) external onlyGovernor {\n        require(operatorRoles[operator] == BLOCK_RESULT_PRODUCER_ROLE, \"Operator is not BRP\");\n        if (_blockResultProducers.contains(operator)) _removeBRPOperatorFromActiveInstances(operator);\n        _validatorOperators[validatorIDs[operator]].remove(operator);\n        validatorIDs[operator] = 0;\n        operatorRoles[operator] = 0;\n        emit OperatorRemoved(operator);\n    }\n\n    /**\n     * Adds the given address to the auditors set\n     */\n    function addAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == 0, \"Operator already exists\");\n        operatorRoles[auditor] = AUDITOR_ROLE;\n        _auditors.add(auditor);\n        emit OperatorAdded(auditor, 0, AUDITOR_ROLE);\n    }\n\n    /**\n     * Removes the given address from the auditors set\n     */\n    function removeAuditor(address auditor) external onlyGovernor {\n        require(operatorRoles[auditor] == AUDITOR_ROLE, \"Operator is not auditor\");\n        operatorRoles[auditor] = 0;\n        _auditors.remove(auditor);\n        emit OperatorRemoved(auditor);\n    }\n\n    /**\n     * Adds the given address to the governors set\n     */\n    function addGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == 0, \"Operator already exists\");\n        operatorRoles[governor] = GOVERNANCE_ROLE;\n        _governors.add(governor);\n        emit OperatorAdded(governor, 0, GOVERNANCE_ROLE);\n    }\n\n    /**\n     * Removes the given address from the governors set\n     */\n    function removeGovernor(address governor) external onlyOwner {\n        require(operatorRoles[governor] == GOVERNANCE_ROLE, \"Operator is not governor\");\n        operatorRoles[governor] = 0;\n        _governors.remove(governor);\n        emit OperatorRemoved(governor);\n    }\n\n    /**\n     * Updates the amount of tokens required to stake in order to be able to submit the proofs\n     */\n    function setBRPRequiredStake(uint128 newStakeAmount) public onlyGovernor {\n        _brpRequiredStake = newStakeAmount;\n        emit MinimumRequiredStakeChanged(newStakeAmount);\n    }\n\n    /**\n     * Updates the address of the staking contract\n     */\n    function setStakingInterface(address stakingContractAddress) public onlyGovernor {\n        _stakingInterface = IOperationalStaking(stakingContractAddress);\n        emit StakingInterfaceChanged(stakingContractAddress);\n    }\n\n    /**\n     * Update the Block Result Quorum Threshold.\n     */\n    function setQuorumThreshold(uint256 quorum) public onlyGovernor {\n        _blockResultQuorum = quorum;\n        emit ResultSessionQuorumChanged(quorum);\n    }\n\n    /**\n     * Update block divisor\n     */\n    function setNthBlock(uint64 chainId, uint64 n) public onlyGovernor {\n        _chainData[chainId].nthBlock = n;\n        emit NthBlockChanged(chainId, n);\n    }\n\n    /**\n     * Update the reward allocation per block result.\n     */\n    function setBlockResultReward(uint128 newBlockResultReward) public onlyGovernor {\n        _blockResultRewardAllocation = newBlockResultReward;\n        emit BlockResultRewardChanged(newBlockResultReward);\n    }\n\n    /**\n     * Update the duration of a result session in blocks\n     */\n    function setBlockResultSessionDuration(uint64 newSessionDuration) public onlyGovernor {\n        _blockResultSessionDuration = newSessionDuration;\n        emit ResultSessionDurationChanged(newSessionDuration);\n    }\n\n    /**\n     * Update the minimum # of submissions required in order to reach quorum\n     */\n    function setMinSubmissionsRequired(uint64 minSubmissions) public onlyGovernor {\n        _minSubmissionsRequired = minSubmissions;\n        emit ResultSessionMinSubmissionChanged(minSubmissions);\n    }\n\n    /**\n     * Update the max # of submissions per operator per block height\n     */\n    function setMaxSubmissionsPerBlockHeight(uint64 chainId, uint64 maxSubmissions) public onlyGovernor {\n        _chainData[chainId].maxSubmissionsPerBlockHeight = maxSubmissions;\n        emit MaxSubmissionsPerBlockHeightChanged(maxSubmissions);\n    }\n\n    /**\n     * Update chain sync data\n     */\n    function setChainSyncData(\n        uint64 chainId,\n        uint256 blockOnTargetChain,\n        uint256 blockOnCurrentChain,\n        uint256 secondsPerBlock\n    ) external onlyGovernor {\n        ChainData storage cd = _chainData[chainId];\n        require(secondsPerBlock > 0, \"Seconds per block cannot be 0\");\n        cd.blockOnTargetChain = blockOnTargetChain;\n        cd.blockOnCurrentChain = blockOnCurrentChain;\n        cd.secondsPerBlock = secondsPerBlock;\n        emit ChainSyncDataChanged(chainId, blockOnTargetChain, blockOnCurrentChain, secondsPerBlock);\n    }\n\n    /**\n     * Update block height submission threshold for live sync\n     */\n    function setBlockHeightSubmissionsThreshold(uint64 chainId, uint64 threshold) external onlyGovernor {\n        _chainData[chainId].allowedThreshold = threshold;\n        emit BlockHeightSubmissionThresholdChanged(chainId, threshold);\n    }\n\n    /**\n     * Update seconds per block on the chain where the ProofChain is deployed\n     */\n    function setSecondsPerBlock(uint64 secondsPerBlock) external onlyGovernor {\n        _secondsPerBlock = secondsPerBlock;\n        emit SecondsPerBlockChanged(secondsPerBlock);\n    }\n\n    /**\n     * Block Result Producers submit their block result proofs using this function.\n     */\n    function submitBlockResultProof(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash,\n        string calldata storageURL\n    ) external {\n        require(_blockResultProducers.contains(msg.sender), \"Sender is not BLOCK_RESULT_PRODUCER_ROLE\");\n        ChainData storage cd = _chainData[chainId];\n        require(cd.nthBlock != 0, \"Invalid chain ID\");\n        require(blockHeight % cd.nthBlock == 0, \"Invalid block height\");\n\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[msg.sender];\n\n        // if this is the first result to be submitted for a block, initialize a new session\n        if (sessionDeadline == 0) {\n            require(!session.requiresAudit, \"Session submissions have closed\");\n\n            uint256 currentBlockOnTargetChain = cd.blockOnTargetChain + (((block.number - cd.blockOnCurrentChain) * _secondsPerBlock) / cd.secondsPerBlock);\n            uint256 lowerBound = currentBlockOnTargetChain >= cd.allowedThreshold ? currentBlockOnTargetChain - cd.allowedThreshold : 0;\n            require(lowerBound <= blockHeight && blockHeight <= currentBlockOnTargetChain + cd.allowedThreshold, \"Block height is out of bounds for live sync\");\n\n            session.sessionDeadline = uint64(block.number + _blockResultSessionDuration);\n            (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n            require(baseStake >= _brpRequiredStake, \"Insufficiently staked to submit\");\n            participantsData.stake = baseStake + delegateStakes;\n\n            session.blockSpecimenHashesRaw.push(blockSpecimenHash);\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[blockSpecimenHash];\n            bh.resultHashes.push(resultHash);\n\n            bh.participants[resultHash].push(msg.sender);\n            participantsData.submissionCounter++;\n            emit SessionStarted(chainId, blockHeight, session.sessionDeadline);\n        } else {\n            require(block.number <= sessionDeadline, \"Session submissions have closed\");\n            require(participantsData.submissionCounter < cd.maxSubmissionsPerBlockHeight, \"Max submissions limit exceeded\");\n\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[blockSpecimenHash];\n            bytes32[] storage resultHashes = bh.resultHashes;\n            if (participantsData.stake != 0) {\n                // check if it was submitted for the same block hash\n                // this should be at most 10 iterations\n                for (uint256 j = 0; j < resultHashes.length; j++) {\n                    address[] storage resultHashParticipants = bh.participants[resultHashes[j]];\n                    for (uint256 k = 0; k < resultHashParticipants.length; k++)\n                        require(resultHashParticipants[k] != msg.sender, \"Operator already submitted for the provided block hash\");\n                }\n            } else {\n                (uint128 baseStake, uint128 delegateStakes) = _stakingInterface.getValidatorCompoundedStakingData(validatorIDs[msg.sender]);\n                require(baseStake >= _brpRequiredStake, \"Insufficiently staked to submit\");\n                participantsData.stake = baseStake + delegateStakes;\n            }\n\n            address[] storage participants = bh.participants[resultHash];\n            if (resultHashes.length != 0) {\n                if (participants.length == 0) resultHashes.push(resultHash);\n            } else {\n                session.blockSpecimenHashesRaw.push(blockSpecimenHash);\n                resultHashes.push(resultHash);\n            }\n\n            participants.push(msg.sender);\n            participantsData.submissionCounter++;\n        }\n        _urls[resultHash].push(storageURL);\n\n        emit BlockResultProductionProofSubmitted(chainId, blockHeight, blockSpecimenHash, resultHash, storageURL, participantsData.stake);\n    }\n\n    /**\n     * This function is called when a quorum of equivalent hashes have been submitted for a Block Result Session.\n     */\n    function finalizeAndRewardResultSession(uint64 chainId, uint64 blockHeight) public {\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        require(block.number > sessionDeadline, \"Session not past deadline\");\n        require(!session.requiresAudit, \"Session cannot be finalized\");\n        require(sessionDeadline != 0, \"Session not started\");\n\n        uint256 contributorsN;\n        bytes32 resultHash;\n\n        uint256 max;\n        bytes32 agreedBlockSpecimenHash;\n        bytes32 agreedResultHash;\n\n        bytes32[] storage blockSpecimenHashesRaw = session.blockSpecimenHashesRaw;\n        bytes32 rawBlockSpecimenHash;\n\n        // find the block hash and result hashes that the quorum agrees on by finding the result hash with the highest number of participants\n        for (uint256 i = 0; i < blockSpecimenHashesRaw.length; i++) {\n            rawBlockSpecimenHash = blockSpecimenHashesRaw[i];\n            BlockSpecimenHash storage bh = session.blockSpecimenHashes[rawBlockSpecimenHash];\n            for (uint256 j = 0; j < bh.resultHashes.length; j++) {\n                resultHash = bh.resultHashes[j];\n                uint256 len = bh.participants[resultHash].length;\n                contributorsN += len;\n                if (len > max) {\n                    max = len;\n                    agreedBlockSpecimenHash = rawBlockSpecimenHash;\n                    agreedResultHash = resultHash;\n                }\n            }\n        }\n        // check if the number of submissions is sufficient and if the quorum is achieved\n        if (_minSubmissionsRequired <= max && (max * _DIVIDER) / contributorsN > _blockResultQuorum)\n            _rewardParticipants(session, chainId, blockHeight, agreedBlockSpecimenHash, agreedResultHash);\n        else emit QuorumNotReached(chainId, blockHeight);\n\n        session.requiresAudit = true;\n        // set session deadline to 0 to release gas\n        session.sessionDeadline = 0;\n    }\n\n    /**\n     * Called by Auditor role when a quorum is not reached. The auditor's submitted hash is\n     * the definitive truth.\n     */\n    function arbitrateBlockResultSession(\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 definitiveResultHash\n    ) public {\n        require(_auditors.contains(msg.sender), \"Sender is not AUDITOR_ROLE\");\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        require(session.requiresAudit, \"Session must be finalized before audit\");\n        _rewardParticipants(session, chainId, blockHeight, blockSpecimenHash, definitiveResultHash);\n    }\n\n    function _rewardParticipants(\n        BlockResultSession storage session,\n        uint64 chainId,\n        uint64 blockHeight,\n        bytes32 blockSpecimenHash,\n        bytes32 resultHash\n    ) internal {\n        address participant;\n        address[] storage participants = session.blockSpecimenHashes[blockSpecimenHash].participants[resultHash];\n        uint256 len = participants.length;\n        uint128[] memory ids = new uint128[](len);\n        uint128[] memory rewards = new uint128[](len);\n        uint128 totalStake;\n        mapping(address => SessionParticipantData) storage participantsData = session.participantsData;\n        for (uint256 i = 0; i < len; i++) {\n            totalStake += participantsData[participants[i]].stake;\n        }\n        for (uint256 i = 0; i < len; i++) {\n            participant = participants[i];\n            SessionParticipantData storage pd = participantsData[participant];\n            ids[i] = validatorIDs[participant];\n            rewards[i] = uint128((uint256(pd.stake) * uint256(_blockResultRewardAllocation)) / totalStake);\n            // release gas if possible\n            if (pd.submissionCounter == 1) {\n                pd.submissionCounter = 0;\n                pd.stake = 0;\n            }\n        }\n        _stakingInterface.rewardValidators(ids, rewards);\n        emit BlockResultRewardAwarded(chainId, blockHeight, blockSpecimenHash, resultHash);\n\n        delete session.blockSpecimenHashes[blockSpecimenHash]; // release gas\n    }\n\n    /**\n     * Returns contract meta data\n     */\n    function getMetadata()\n        public\n        view\n        returns (\n            address stakingInterface,\n            uint128 blockResultRewardAllocation,\n            uint64 blockResultSessionDuration,\n            uint64 minSubmissionsRequired,\n            uint256 blockResultQuorum,\n            uint256 secondsPerBlock\n        )\n    {\n        return (address(_stakingInterface), _blockResultRewardAllocation, _blockResultSessionDuration, _minSubmissionsRequired, _blockResultQuorum, _secondsPerBlock);\n    }\n\n    /**\n     * Returns data used for chain sync\n     */\n    function getChainData(uint64 chainId)\n        external\n        view\n        returns (\n            uint256 blockOnTargetChain,\n            uint256 blockOnCurrentChain,\n            uint256 secondsPerBlock,\n            uint128 allowedThreshold,\n            uint128 maxSubmissionsPerBlockHeight,\n            uint64 nthBlock\n        )\n    {\n        ChainData memory cd = _chainData[chainId];\n        return (cd.blockOnTargetChain, cd.blockOnCurrentChain, cd.secondsPerBlock, cd.allowedThreshold, cd.maxSubmissionsPerBlockHeight, cd.nthBlock);\n    }\n\n    /**\n     * Returns all brp operator addresses (disabled and enabled) of a given validator\n     */\n    function getOperators(uint128 validatorId) external view returns (address[] memory) {\n        return _validatorOperators[validatorId].values();\n    }\n\n    /**\n     * Returns all enabled operators by role type\n     */\n    function getAllOperators()\n        external\n        view\n        returns (\n            address[] memory _brps,\n            address[] memory __governors,\n            address[] memory __auditors\n        )\n    {\n        return (_blockResultProducers.values(), _governors.values(), _auditors.values());\n    }\n\n    /**\n     * Returns required stake and enabled block result producer operators\n     */\n    function getBRPRoleData() external view returns (uint128 requiredStake, address[] memory activeMembers) {\n        return (_brpRequiredStake, _blockResultProducers.values());\n    }\n\n    /**\n     * Returns true if the given operator is enabled.\n     * Returns false if the operator is disabled or does not exist\n     */\n    function isEnabled(address operator) external view returns (bool) {\n        return _blockResultProducers.contains(operator);\n    }\n\n    /**\n     * Returns IPFS urls where results reside\n     */\n    function getURLS(bytes32 resulthash) external view returns (string[] memory) {\n        return _urls[resulthash];\n    }\n\n    /**\n     * This function is called to check whether the sesion is open for the given chain id and block height\n     */\n    function isSessionOpen(\n        uint64 chainId,\n        uint64 blockHeight,\n        address operator\n    ) public view returns (bool) {\n        BlockResultSession storage session = _sessions[chainId][blockHeight];\n        uint64 sessionDeadline = session.sessionDeadline;\n        SessionParticipantData storage participantsData = session.participantsData[operator];\n        bool submissionLimitExceeded = participantsData.submissionCounter == _chainData[chainId].maxSubmissionsPerBlockHeight;\n        return (!submissionLimitExceeded && block.number <= sessionDeadline) || (sessionDeadline == 0 && !session.requiresAudit);\n    }\n}\n"
        },
        "./contracts/IOperationalStaking.sol": {
            "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.13;\n\ninterface IOperationalStaking {\n    function getValidatorMetadata(uint128 validatorId)\n        external\n        view\n        returns (\n            address _address,\n            uint128 staked,\n            uint128 delegated,\n            uint128 commissionRate\n        );\n\n    function getValidatorStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated);\n\n    function getValidatorCompoundedStakingData(uint128 validatorId) external view returns (uint128 staked, uint128 delegated);\n\n    function rewardValidators(uint128[] calldata validatorId, uint128[] calldata amount) external;\n\n    function addValidator(address validator, uint128 commissionRate) external returns (uint256 id);\n\n    function disableValidator(uint128 validatorId, uint256 blockNumber) external;\n\n    function enableValidator(uint128 validatorId) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}